
mcu_lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004868  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad8  08004ad8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad8  08004ad8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000078  08004b58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004b58  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fc  00000000  00000000  00030a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00033378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00034290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019783  00000000  00000000  00035090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105c9  00000000  00000000  0004e813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef30  00000000  00000000  0005eddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edd0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f4  00000000  00000000  000edd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800495c 	.word	0x0800495c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800495c 	.word	0x0800495c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1d      	ldr	r2, [pc, #116]	; (80001e4 <HAL_UART_RxCpltCallback+0x84>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d135      	bne.n	80001de <HAL_UART_RxCpltCallback+0x7e>
		// process recevied character
		//HAL_UART_Transmit(&huart1, &temp, 1, 50);
		if (index_buffer >= MAX_BUFFER_SIZE) {
 8000172:	4b1d      	ldr	r3, [pc, #116]	; (80001e8 <HAL_UART_RxCpltCallback+0x88>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b1d      	cmp	r3, #29
 8000178:	d903      	bls.n	8000182 <HAL_UART_RxCpltCallback+0x22>
			ERROR_CODE_G = BUFFER_IS_FULL;
 800017a:	4b1c      	ldr	r3, [pc, #112]	; (80001ec <HAL_UART_RxCpltCallback+0x8c>)
 800017c:	220a      	movs	r2, #10
 800017e:	701a      	strb	r2, [r3, #0]
			return;
 8000180:	e02d      	b.n	80001de <HAL_UART_RxCpltCallback+0x7e>
		}
		switch (temp) {
 8000182:	4b1b      	ldr	r3, [pc, #108]	; (80001f0 <HAL_UART_RxCpltCallback+0x90>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b20      	cmp	r3, #32
 8000188:	d023      	beq.n	80001d2 <HAL_UART_RxCpltCallback+0x72>
 800018a:	2b20      	cmp	r3, #32
 800018c:	dc15      	bgt.n	80001ba <HAL_UART_RxCpltCallback+0x5a>
 800018e:	2b08      	cmp	r3, #8
 8000190:	d002      	beq.n	8000198 <HAL_UART_RxCpltCallback+0x38>
 8000192:	2b0d      	cmp	r3, #13
 8000194:	d00d      	beq.n	80001b2 <HAL_UART_RxCpltCallback+0x52>
 8000196:	e010      	b.n	80001ba <HAL_UART_RxCpltCallback+0x5a>
			case ' ':
				break;
			case '\b': // backspace
				buffer[index_buffer - 1] = 0;
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <HAL_UART_RxCpltCallback+0x88>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	4a15      	ldr	r2, [pc, #84]	; (80001f4 <HAL_UART_RxCpltCallback+0x94>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	54d1      	strb	r1, [r2, r3]
				index_buffer--;
 80001a4:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <HAL_UART_RxCpltCallback+0x88>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	3b01      	subs	r3, #1
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <HAL_UART_RxCpltCallback+0x88>)
 80001ae:	701a      	strb	r2, [r3, #0]
				break;
 80001b0:	e010      	b.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
			case '\r': // enter, process data now
				buffer_flag = 1;
 80001b2:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <HAL_UART_RxCpltCallback+0x98>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	701a      	strb	r2, [r3, #0]
				break;
 80001b8:	e00c      	b.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
			default:
				buffer[index_buffer++] = temp;
 80001ba:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <HAL_UART_RxCpltCallback+0x88>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	b2d1      	uxtb	r1, r2
 80001c2:	4a09      	ldr	r2, [pc, #36]	; (80001e8 <HAL_UART_RxCpltCallback+0x88>)
 80001c4:	7011      	strb	r1, [r2, #0]
 80001c6:	461a      	mov	r2, r3
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <HAL_UART_RxCpltCallback+0x90>)
 80001ca:	7819      	ldrb	r1, [r3, #0]
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <HAL_UART_RxCpltCallback+0x94>)
 80001ce:	5499      	strb	r1, [r3, r2]
				break;
 80001d0:	e000      	b.n	80001d4 <HAL_UART_RxCpltCallback+0x74>
				break;
 80001d2:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart1, &temp, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	4906      	ldr	r1, [pc, #24]	; (80001f0 <HAL_UART_RxCpltCallback+0x90>)
 80001d8:	4808      	ldr	r0, [pc, #32]	; (80001fc <HAL_UART_RxCpltCallback+0x9c>)
 80001da:	f002 ff5e 	bl	800309a <HAL_UART_Receive_IT>
  }
}
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	40013800 	.word	0x40013800
 80001e8:	200000ee 	.word	0x200000ee
 80001ec:	20000008 	.word	0x20000008
 80001f0:	200000cd 	.word	0x200000cd
 80001f4:	200000d0 	.word	0x200000d0
 80001f8:	200000ef 	.word	0x200000ef
 80001fc:	20000130 	.word	0x20000130

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b08e      	sub	sp, #56	; 0x38
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f000 fd39 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f837 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 f939 	bl	8000484 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000212:	f000 f883 	bl	800031c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000216:	f000 f8bf 	bl	8000398 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800021a:	f000 f909 	bl	8000430 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800021e:	4812      	ldr	r0, [pc, #72]	; (8000268 <main+0x68>)
 8000220:	f000 fe8a 	bl	8000f38 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <main+0x6c>)
 8000226:	f002 fa23 	bl	8002670 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive(&huart1, &temp, 1, 1000);
 800022a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022e:	2201      	movs	r2, #1
 8000230:	490f      	ldr	r1, [pc, #60]	; (8000270 <main+0x70>)
 8000232:	4810      	ldr	r0, [pc, #64]	; (8000274 <main+0x74>)
 8000234:	f002 fe8f 	bl	8002f56 <HAL_UART_Receive>
  HAL_UART_Receive_IT(&huart1, &temp, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <main+0x70>)
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <main+0x74>)
 800023e:	f002 ff2c 	bl	800309a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f000 f964 	bl	8000510 <setTimer1>
//	  HAL_GPIO_TogglePin ( LED_RED_GPIO_Port , LED_RED_Pin);
//	  ADC_value = HAL_ADC_GetValue(&hadc1);
//	  printf("!ADC=%d#\r\n", ADC_value);
//	  HAL_UART_Transmit (&huart1 , ( void *) str , sprintf ( str , "%lu\n"
//	  , ADC_value ) , 1000) ;
	  if (buffer_flag == 1) {
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <main+0x78>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d104      	bne.n	800025a <main+0x5a>
		  command_parser_fsm();
 8000250:	f000 fbd2 	bl	80009f8 <command_parser_fsm>
		  buffer_flag = 0;
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0x78>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communication_fsm();
 800025a:	f000 fc47 	bl	8000aec <uart_communication_fsm>
	  HAL_Delay(500);
 800025e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000262:	f000 fd6d 	bl	8000d40 <HAL_Delay>
	  if (buffer_flag == 1) {
 8000266:	e7ef      	b.n	8000248 <main+0x48>
 8000268:	20000100 	.word	0x20000100
 800026c:	20000174 	.word	0x20000174
 8000270:	200000cd 	.word	0x200000cd
 8000274:	20000130 	.word	0x20000130
 8000278:	200000ef 	.word	0x200000ef

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	; 0x50
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fb88 	bl	80039a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2310      	movs	r3, #16
 80002b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fcb5 	bl	8001c30 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002cc:	f000 f91b 	bl	8000506 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 ff20 	bl	8002130 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002f6:	f000 f906 	bl	8000506 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002fa:	2302      	movs	r3, #2
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f002 f8ad 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000310:	f000 f8f9 	bl	8000506 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3750      	adds	r7, #80	; 0x50
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_ADC1_Init+0x74>)
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_ADC1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_ADC1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_ADC1_Init+0x74>)
 800033a:	2201      	movs	r2, #1
 800033c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_ADC1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_ADC1_Init+0x74>)
 8000346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800034a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_ADC1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_ADC1_Init+0x74>)
 8000354:	2201      	movs	r2, #1
 8000356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x74>)
 800035a:	f000 fd15 	bl	8000d88 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000364:	f000 f8cf 	bl	8000506 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_ADC1_Init+0x74>)
 800037a:	f000 ff6d 	bl	8001258 <HAL_ADC_ConfigChannel>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000384:	f000 f8bf 	bl	8000506 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000100 	.word	0x20000100
 8000394:	40012400 	.word	0x40012400

08000398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	463b      	mov	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <MX_TIM2_Init+0x94>)
 80003b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_TIM2_Init+0x94>)
 80003be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_TIM2_Init+0x94>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_TIM2_Init+0x94>)
 80003cc:	2209      	movs	r2, #9
 80003ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_TIM2_Init+0x94>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_TIM2_Init+0x94>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <MX_TIM2_Init+0x94>)
 80003de:	f002 f8f7 	bl	80025d0 <HAL_TIM_Base_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003e8:	f000 f88d 	bl	8000506 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_TIM2_Init+0x94>)
 80003fa:	f002 fa8d 	bl	8002918 <HAL_TIM_ConfigClockSource>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000404:	f000 f87f 	bl	8000506 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_TIM2_Init+0x94>)
 8000416:	f002 fc55 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000420:	f000 f871 	bl	8000506 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000174 	.word	0x20000174

08000430 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <MX_USART1_UART_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_USART1_UART_Init+0x4c>)
 800043c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART1_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART1_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_USART1_UART_Init+0x4c>)
 8000468:	f002 fc96 	bl	8002d98 <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000472:	f000 f848 	bl	8000506 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000130 	.word	0x20000130
 8000480:	40013800 	.word	0x40013800

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_GPIO_Init+0x5c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <MX_GPIO_Init+0x5c>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_GPIO_Init+0x5c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2120      	movs	r1, #32
 80004b4:	480b      	ldr	r0, [pc, #44]	; (80004e4 <MX_GPIO_Init+0x60>)
 80004b6:	f001 fba3 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80004ba:	2320      	movs	r3, #32
 80004bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0x60>)
 80004d2:	f001 fa1b 	bl	800190c <HAL_GPIO_Init>

}
 80004d6:	bf00      	nop
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010800 	.word	0x40010800

080004e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	// timerRun()
	if (htim->Instance == TIM2) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f8:	d101      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x16>
		//timestamp++; // increase timestamp by 10ms
		timerRun();
 80004fa:	f000 f823 	bl	8000544 <timerRun>
	}

	if (htim->Instance == TIM3) {
		// do something
	}
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050a:	b672      	cpsid	i
}
 800050c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050e:	e7fe      	b.n	800050e <Error_Handler+0x8>

08000510 <setTimer1>:
int timer5_counter = 0;
int timer6_counter = 0;

int TIMER_CYCLE = 10; // 10ms

void setTimer1(int duration) {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <setTimer1+0x28>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <setTimer1+0x2c>)
 8000524:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <setTimer1+0x30>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000
 800053c:	200000ac 	.word	0x200000ac
 8000540:	20000094 	.word	0x20000094

08000544 <timerRun>:
void setTimer6(int duration) {
	timer6_counter = duration / TIMER_CYCLE;
	timer6_flag = 0;
}

void timerRun() {
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <timerRun+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	dd0b      	ble.n	8000568 <timerRun+0x24>
		timer1_counter--;
 8000550:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <timerRun+0xcc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3b01      	subs	r3, #1
 8000556:	4a2e      	ldr	r2, [pc, #184]	; (8000610 <timerRun+0xcc>)
 8000558:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 800055a:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <timerRun+0xcc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	dc02      	bgt.n	8000568 <timerRun+0x24>
			timer1_flag = 1;
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <timerRun+0xd0>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <timerRun+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	dd0b      	ble.n	8000588 <timerRun+0x44>
		timer2_counter--;
 8000570:	4b29      	ldr	r3, [pc, #164]	; (8000618 <timerRun+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	4a28      	ldr	r2, [pc, #160]	; (8000618 <timerRun+0xd4>)
 8000578:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <timerRun+0xd4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	dc02      	bgt.n	8000588 <timerRun+0x44>
			timer2_flag = 1;
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <timerRun+0xd8>)
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <timerRun+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd0b      	ble.n	80005a8 <timerRun+0x64>
		timer3_counter--;
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <timerRun+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a22      	ldr	r2, [pc, #136]	; (8000620 <timerRun+0xdc>)
 8000598:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <timerRun+0xdc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	dc02      	bgt.n	80005a8 <timerRun+0x64>
			timer3_flag = 1;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <timerRun+0xe0>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <timerRun+0xe4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	dd0b      	ble.n	80005c8 <timerRun+0x84>
		timer4_counter--;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <timerRun+0xe4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <timerRun+0xe4>)
 80005b8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <timerRun+0xe4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dc02      	bgt.n	80005c8 <timerRun+0x84>
			timer4_flag = 1;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <timerRun+0xe8>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <timerRun+0xec>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dd0b      	ble.n	80005e8 <timerRun+0xa4>
		timer5_counter--;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <timerRun+0xec>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <timerRun+0xec>)
 80005d8:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <timerRun+0xec>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dc02      	bgt.n	80005e8 <timerRun+0xa4>
			timer5_flag = 1;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <timerRun+0xf0>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0) {
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <timerRun+0xf4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dd0b      	ble.n	8000608 <timerRun+0xc4>
		timer6_counter--;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <timerRun+0xf4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <timerRun+0xf4>)
 80005f8:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0) {
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <timerRun+0xf4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	dc02      	bgt.n	8000608 <timerRun+0xc4>
			timer6_flag = 1;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <timerRun+0xf8>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	200000ac 	.word	0x200000ac
 8000614:	20000094 	.word	0x20000094
 8000618:	200000b0 	.word	0x200000b0
 800061c:	20000098 	.word	0x20000098
 8000620:	200000b4 	.word	0x200000b4
 8000624:	2000009c 	.word	0x2000009c
 8000628:	200000b8 	.word	0x200000b8
 800062c:	200000a0 	.word	0x200000a0
 8000630:	200000bc 	.word	0x200000bc
 8000634:	200000a4 	.word	0x200000a4
 8000638:	200000c0 	.word	0x200000c0
 800063c:	200000a8 	.word	0x200000a8

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_MspInit+0x5c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x5c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_MspInit+0x60>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_MspInit+0x60>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000

080006a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <HAL_ADC_MspInit+0x7c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d129      	bne.n	8000718 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_ADC_MspInit+0x80>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a16      	ldr	r2, [pc, #88]	; (8000724 <HAL_ADC_MspInit+0x80>)
 80006ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_ADC_MspInit+0x80>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_ADC_MspInit+0x80>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <HAL_ADC_MspInit+0x80>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_ADC_MspInit+0x80>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f8:	2303      	movs	r3, #3
 80006fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <HAL_ADC_MspInit+0x84>)
 8000704:	f001 f902 	bl	800190c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2012      	movs	r0, #18
 800070e:	f001 f816 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000712:	2012      	movs	r0, #18
 8000714:	f001 f82f 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40012400 	.word	0x40012400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800073c:	d113      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_TIM_Base_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_TIM_Base_MspInit+0x44>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_TIM_Base_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	201c      	movs	r0, #28
 800075c:	f000 ffef 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000760:	201c      	movs	r0, #28
 8000762:	f001 f808 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <HAL_UART_MspInit+0x9c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d139      	bne.n	8000808 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <HAL_UART_MspInit+0xa0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <HAL_UART_MspInit+0xa0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a18      	ldr	r2, [pc, #96]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <HAL_UART_MspInit+0xa4>)
 80007da:	f001 f897 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_UART_MspInit+0xa4>)
 80007f4:	f001 f88a 	bl	800190c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2025      	movs	r0, #37	; 0x25
 80007fe:	f000 ff9e 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000802:	2025      	movs	r0, #37	; 0x25
 8000804:	f000 ffb7 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40013800 	.word	0x40013800
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 fa51 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <ADC1_2_IRQHandler+0x10>)
 8000872:	f000 fc1b 	bl	80010ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000100 	.word	0x20000100

08000880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM2_IRQHandler+0x10>)
 8000886:	f001 ff3f 	bl	8002708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000174 	.word	0x20000174

08000894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <USART1_IRQHandler+0x10>)
 800089a:	f002 fc2f 	bl	80030fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000130 	.word	0x20000130

080008a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e00a      	b.n	80008d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ba:	f3af 8000 	nop.w
 80008be:	4601      	mov	r1, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	b2ca      	uxtb	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf0      	blt.n	80008ba <_read+0x12>
	}

return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
	return -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000908:	605a      	str	r2, [r3, #4]
	return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <_isatty>:

int _isatty(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
	return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f002 ffea 	bl	800394c <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20002800 	.word	0x20002800
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200000c4 	.word	0x200000c4
 80009ac:	200001d0 	.word	0x200001d0

080009b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <reset_buffer>:
uint32_t ADC_value = 0;

uint8_t try_times = 0;

uint8_t ERROR_CODE_G = NORMAL;
void reset_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUFFER_SIZE; i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e007      	b.n	80009d8 <reset_buffer+0x1c>
		buffer[i] = 0;
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <reset_buffer+0x34>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_BUFFER_SIZE; i++) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3301      	adds	r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b1d      	cmp	r3, #29
 80009dc:	ddf4      	ble.n	80009c8 <reset_buffer+0xc>
	}
	index_buffer = 0;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <reset_buffer+0x38>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200000d0 	.word	0x200000d0
 80009f4:	200000ee 	.word	0x200000ee

080009f8 <command_parser_fsm>:
void command_parser_fsm() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < index_buffer; i++) printf("%d\r\n", buffer[i]);
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e00a      	b.n	8000a1a <command_parser_fsm+0x22>
 8000a04:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <command_parser_fsm+0xc8>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <command_parser_fsm+0xcc>)
 8000a10:	f002 ffce 	bl	80039b0 <iprintf>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <command_parser_fsm+0xd0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	dbee      	blt.n	8000a04 <command_parser_fsm+0xc>

	switch(index_buffer) {
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <command_parser_fsm+0xd0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d01e      	beq.n	8000a6c <command_parser_fsm+0x74>
 8000a2e:	2b05      	cmp	r3, #5
 8000a30:	dc36      	bgt.n	8000aa0 <command_parser_fsm+0xa8>
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	dc02      	bgt.n	8000a3c <command_parser_fsm+0x44>
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da03      	bge.n	8000a42 <command_parser_fsm+0x4a>
 8000a3a:	e031      	b.n	8000aa0 <command_parser_fsm+0xa8>
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d004      	beq.n	8000a4a <command_parser_fsm+0x52>
 8000a40:	e02e      	b.n	8000aa0 <command_parser_fsm+0xa8>
		case 0:
		case 1:
		case 2:
		case 3:
			ERROR_CODE_G = CMD_NOT_EXIST;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <command_parser_fsm+0xd4>)
 8000a44:	220b      	movs	r2, #11
 8000a46:	701a      	strb	r2, [r3, #0]
			break;
 8000a48:	e031      	b.n	8000aae <command_parser_fsm+0xb6>
		case 4: // user done communicate with command !OK#
			if (strcmp((const char *)buffer, userOK) == 0) {
 8000a4a:	4921      	ldr	r1, [pc, #132]	; (8000ad0 <command_parser_fsm+0xd8>)
 8000a4c:	481c      	ldr	r0, [pc, #112]	; (8000ac0 <command_parser_fsm+0xc8>)
 8000a4e:	f7ff fb7d 	bl	800014c <strcmp>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d127      	bne.n	8000aa8 <command_parser_fsm+0xb0>
					printf("\r\nOk\r\n");
 8000a58:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <command_parser_fsm+0xdc>)
 8000a5a:	f003 f82f 	bl	8003abc <puts>
					status_ACK = END_SEND;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <command_parser_fsm+0xe0>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	601a      	str	r2, [r3, #0]
					ERROR_CODE_G = NORMAL;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <command_parser_fsm+0xd4>)
 8000a66:	2209      	movs	r2, #9
 8000a68:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a6a:	e01d      	b.n	8000aa8 <command_parser_fsm+0xb0>
		case 5: // user request command !RST#
			if (strcmp((const char *)buffer, userRequest) == 0) {
 8000a6c:	491b      	ldr	r1, [pc, #108]	; (8000adc <command_parser_fsm+0xe4>)
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <command_parser_fsm+0xc8>)
 8000a70:	f7ff fb6c 	bl	800014c <strcmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d118      	bne.n	8000aac <command_parser_fsm+0xb4>
					printf("\r\nRequesting\r\n");
 8000a7a:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <command_parser_fsm+0xe8>)
 8000a7c:	f003 f81e 	bl	8003abc <puts>
					status_ACK = SEND_ADC;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <command_parser_fsm+0xe0>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	601a      	str	r2, [r3, #0]
					ADC_value = HAL_ADC_GetValue(&hadc1);
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <command_parser_fsm+0xec>)
 8000a88:	f000 fb04 	bl	8001094 <HAL_ADC_GetValue>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <command_parser_fsm+0xf0>)
 8000a90:	6013      	str	r3, [r2, #0]
					setTimer1(10);
 8000a92:	200a      	movs	r0, #10
 8000a94:	f7ff fd3c 	bl	8000510 <setTimer1>
					ERROR_CODE_G = NORMAL;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <command_parser_fsm+0xd4>)
 8000a9a:	2209      	movs	r2, #9
 8000a9c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000a9e:	e005      	b.n	8000aac <command_parser_fsm+0xb4>
		default:
			ERROR_CODE_G = CMD_NOT_EXIST;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <command_parser_fsm+0xd4>)
 8000aa2:	220b      	movs	r2, #11
 8000aa4:	701a      	strb	r2, [r3, #0]
			break;
 8000aa6:	e002      	b.n	8000aae <command_parser_fsm+0xb6>
			break;
 8000aa8:	bf00      	nop
 8000aaa:	e000      	b.n	8000aae <command_parser_fsm+0xb6>
			break;
 8000aac:	bf00      	nop

	}
	error_notify();
 8000aae:	f000 f883 	bl	8000bb8 <error_notify>
	reset_buffer();
 8000ab2:	f7ff ff83 	bl	80009bc <reset_buffer>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000d0 	.word	0x200000d0
 8000ac4:	08004974 	.word	0x08004974
 8000ac8:	200000ee 	.word	0x200000ee
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	08004a38 	.word	0x08004a38
 8000ad4:	0800497c 	.word	0x0800497c
 8000ad8:	200000c8 	.word	0x200000c8
 8000adc:	08004a30 	.word	0x08004a30
 8000ae0:	08004984 	.word	0x08004984
 8000ae4:	20000100 	.word	0x20000100
 8000ae8:	200000f0 	.word	0x200000f0

08000aec <uart_communication_fsm>:

void uart_communication_fsm() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	switch(status_ACK) {
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <uart_communication_fsm+0xa8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d848      	bhi.n	8000b8c <uart_communication_fsm+0xa0>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <uart_communication_fsm+0x14>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b8d 	.word	0x08000b8d
 8000b04:	08000b11 	.word	0x08000b11
 8000b08:	08000b29 	.word	0x08000b29
 8000b0c:	08000b73 	.word	0x08000b73
		case IDE_MODE:
			break;
		case SEND_ADC:
				status_ACK = WAIT_ACK;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <uart_communication_fsm+0xa8>)
 8000b12:	2203      	movs	r2, #3
 8000b14:	601a      	str	r2, [r3, #0]

				printf("!ADC=%lu#\r\n", ADC_value);
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <uart_communication_fsm+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <uart_communication_fsm+0xb0>)
 8000b1e:	f002 ff47 	bl	80039b0 <iprintf>
				reset_buffer();
 8000b22:	f7ff ff4b 	bl	80009bc <reset_buffer>
			break;
 8000b26:	e031      	b.n	8000b8c <uart_communication_fsm+0xa0>
		case WAIT_ACK:
			if (timer1_flag == 1) {
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <uart_communication_fsm+0xb4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d12c      	bne.n	8000b8a <uart_communication_fsm+0x9e>
				if (try_times >= MAX_TRY_TIMES) {
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <uart_communication_fsm+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d909      	bls.n	8000b4c <uart_communication_fsm+0x60>
					startWaitingUser = false;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <uart_communication_fsm+0xbc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
					printf("MAX TRY TIMES REACHED\r\n");
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <uart_communication_fsm+0xc0>)
 8000b40:	f002 ffbc 	bl	8003abc <puts>
					status_ACK = END_SEND;
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <uart_communication_fsm+0xa8>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	601a      	str	r2, [r3, #0]
					break;
 8000b4a:	e01f      	b.n	8000b8c <uart_communication_fsm+0xa0>
				} else {
					try_times++;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <uart_communication_fsm+0xb8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <uart_communication_fsm+0xb8>)
 8000b56:	701a      	strb	r2, [r3, #0]
					printf("!ADC=%ld#\r\n", ADC_value);
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <uart_communication_fsm+0xac>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <uart_communication_fsm+0xc4>)
 8000b60:	f002 ff26 	bl	80039b0 <iprintf>
				}

				setTimer1(TIME_OUT_ACK);
 8000b64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b68:	f7ff fcd2 	bl	8000510 <setTimer1>
				reset_buffer();
 8000b6c:	f7ff ff26 	bl	80009bc <reset_buffer>
			}
			break;
 8000b70:	e00b      	b.n	8000b8a <uart_communication_fsm+0x9e>
		case END_SEND:
			status_ACK = IDE_MODE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <uart_communication_fsm+0xa8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
			printf("USER RESPONE\r\n");
 8000b78:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <uart_communication_fsm+0xc8>)
 8000b7a:	f002 ff9f 	bl	8003abc <puts>
			try_times = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <uart_communication_fsm+0xb8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
			reset_buffer();
 8000b84:	f7ff ff1a 	bl	80009bc <reset_buffer>
			break;
 8000b88:	e000      	b.n	8000b8c <uart_communication_fsm+0xa0>
			break;
 8000b8a:	bf00      	nop
	}

	System_Go_To_Sleep();
 8000b8c:	f000 f834 	bl	8000bf8 <System_Go_To_Sleep>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000c8 	.word	0x200000c8
 8000b98:	200000f0 	.word	0x200000f0
 8000b9c:	08004994 	.word	0x08004994
 8000ba0:	20000094 	.word	0x20000094
 8000ba4:	200000f4 	.word	0x200000f4
 8000ba8:	200000cc 	.word	0x200000cc
 8000bac:	080049a0 	.word	0x080049a0
 8000bb0:	080049b8 	.word	0x080049b8
 8000bb4:	080049c4 	.word	0x080049c4

08000bb8 <error_notify>:

void error_notify() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	switch (ERROR_CODE_G) {
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <error_notify+0x34>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b0b      	cmp	r3, #11
 8000bc2:	d00a      	beq.n	8000bda <error_notify+0x22>
 8000bc4:	2b0b      	cmp	r3, #11
 8000bc6:	dc0c      	bgt.n	8000be2 <error_notify+0x2a>
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	d00c      	beq.n	8000be6 <error_notify+0x2e>
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d000      	beq.n	8000bd2 <error_notify+0x1a>
			break;
		case CMD_NOT_EXIST:
			printf("ERROR: COMMAND NOT EXIST\r\n");
			break;
		default:
			break;
 8000bd0:	e007      	b.n	8000be2 <error_notify+0x2a>
			printf("ERROR: BUFFER IS FULL\r\n");
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <error_notify+0x38>)
 8000bd4:	f002 ff72 	bl	8003abc <puts>
			break;
 8000bd8:	e006      	b.n	8000be8 <error_notify+0x30>
			printf("ERROR: COMMAND NOT EXIST\r\n");
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <error_notify+0x3c>)
 8000bdc:	f002 ff6e 	bl	8003abc <puts>
			break;
 8000be0:	e002      	b.n	8000be8 <error_notify+0x30>
			break;
 8000be2:	bf00      	nop
 8000be4:	e000      	b.n	8000be8 <error_notify+0x30>
			break;
 8000be6:	bf00      	nop
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	080049d4 	.word	0x080049d4
 8000bf4:	080049ec 	.word	0x080049ec

08000bf8 <System_Go_To_Sleep>:

void System_Go_To_Sleep() {
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <_write>:
#include "uart_msg.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <_write+0x28>)
 8000c1c:	f002 f909 	bl	8002e32 <HAL_UART_Transmit>
	return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000130 	.word	0x20000130

08000c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c56:	f7ff feab 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f002 fe7d 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5e:	f7ff facf 	bl	8000200 <main>
  bx lr
 8000c62:	4770      	bx	lr
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c6c:	08004ae0 	.word	0x08004ae0
  ldr r2, =_sbss
 8000c70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c74:	200001d0 	.word	0x200001d0

08000c78 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <CAN1_RX1_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x28>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x28>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 fd4b 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	200f      	movs	r0, #15
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fcd2 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fd63 	bl	8001792 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 fd2b 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000010 	.word	0x20000010
 8000d04:	2000000c 	.word	0x2000000c

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000010 	.word	0x20000010
 8000d28:	200001bc 	.word	0x200001bc

08000d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	200001bc 	.word	0x200001bc

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff fff0 	bl	8000d2c <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffe0 	bl	8000d2c <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000010 	.word	0x20000010

08000d88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0be      	b.n	8000f28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fc6c 	bl	80006a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 fb95 	bl	80014fc <ADC_ConversionStop_Disable>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8099 	bne.w	8000f16 <HAL_ADC_Init+0x18e>
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 8095 	bne.w	8000f16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df4:	f023 0302 	bic.w	r3, r3, #2
 8000df8:	f043 0202 	orr.w	r2, r3, #2
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7b1b      	ldrb	r3, [r3, #12]
 8000e0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e20:	d003      	beq.n	8000e2a <HAL_ADC_Init+0xa2>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <HAL_ADC_Init+0xa8>
 8000e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2e:	e000      	b.n	8000e32 <HAL_ADC_Init+0xaa>
 8000e30:	2300      	movs	r3, #0
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7d1b      	ldrb	r3, [r3, #20]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d119      	bne.n	8000e74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7b1b      	ldrb	r3, [r3, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d109      	bne.n	8000e5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	035a      	lsls	r2, r3, #13
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	e00b      	b.n	8000e74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f043 0220 	orr.w	r2, r3, #32
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_ADC_Init+0x1a8>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea4:	d003      	beq.n	8000eae <HAL_ADC_Init+0x126>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d104      	bne.n	8000eb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	051b      	lsls	r3, r3, #20
 8000eb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_ADC_Init+0x1ac>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d10b      	bne.n	8000ef4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ef2:	e018      	b.n	8000f26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f023 0312 	bic.w	r3, r3, #18
 8000efc:	f043 0210 	orr.w	r2, r3, #16
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	f043 0201 	orr.w	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f14:	e007      	b.n	8000f26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f043 0210 	orr.w	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	ffe1f7fd 	.word	0xffe1f7fd
 8000f34:	ff1f0efe 	.word	0xff1f0efe

08000f38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <HAL_ADC_Start+0x1a>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e098      	b.n	8001084 <HAL_ADC_Start+0x14c>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fa74 	bl	8001448 <ADC_Enable>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8087 	bne.w	800107a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a41      	ldr	r2, [pc, #260]	; (800108c <HAL_ADC_Start+0x154>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d105      	bne.n	8000f96 <HAL_ADC_Start+0x5e>
 8000f8a:	4b41      	ldr	r3, [pc, #260]	; (8001090 <HAL_ADC_Start+0x158>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d115      	bne.n	8000fc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d026      	beq.n	8000ffe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc0:	e01d      	b.n	8000ffe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_ADC_Start+0x158>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d004      	beq.n	8000fe2 <HAL_ADC_Start+0xaa>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <HAL_ADC_Start+0x154>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10d      	bne.n	8000ffe <HAL_ADC_Start+0xc6>
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_ADC_Start+0x158>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	f023 0206 	bic.w	r2, r3, #6
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
 8001016:	e002      	b.n	800101e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f06f 0202 	mvn.w	r2, #2
 800102e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800103a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800103e:	d113      	bne.n	8001068 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_ADC_Start+0x154>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d105      	bne.n	8001056 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_ADC_Start+0x158>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	e00c      	b.n	8001082 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	e003      	b.n	8001082 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012800 	.word	0x40012800
 8001090:	40012400 	.word	0x40012400

08001094 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	2b20      	cmp	r3, #32
 80010c0:	d140      	bne.n	8001144 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d139      	bne.n	8001144 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010f6:	d11d      	bne.n	8001134 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d119      	bne.n	8001134 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0220 	bic.w	r2, r2, #32
 800110e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f87c 	bl	8001232 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f06f 0212 	mvn.w	r2, #18
 8001142:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	2b80      	cmp	r3, #128	; 0x80
 8001150:	d14f      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d148      	bne.n	80011f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	2b00      	cmp	r3, #0
 800116a:	d105      	bne.n	8001178 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001182:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001186:	d012      	beq.n	80011ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001192:	2b00      	cmp	r3, #0
 8001194:	d125      	bne.n	80011e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011a4:	d11d      	bne.n	80011e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d119      	bne.n	80011e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f9cb 	bl	800157e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f06f 020c 	mvn.w	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fc:	2b40      	cmp	r3, #64	; 0x40
 80011fe:	d114      	bne.n	800122a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10d      	bne.n	800122a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f812 	bl	8001244 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0201 	mvn.w	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
	...

08001258 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x20>
 8001274:	2302      	movs	r3, #2
 8001276:	e0dc      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1da>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b06      	cmp	r3, #6
 8001286:	d81c      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b05      	subs	r3, #5
 800129a:	221f      	movs	r2, #31
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4019      	ands	r1, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b05      	subs	r3, #5
 80012b4:	fa00 f203 	lsl.w	r2, r0, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
 80012c0:	e03c      	b.n	800133c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b0c      	cmp	r3, #12
 80012c8:	d81c      	bhi.n	8001304 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	3b23      	subs	r3, #35	; 0x23
 80012dc:	221f      	movs	r2, #31
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4019      	ands	r1, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b23      	subs	r3, #35	; 0x23
 80012f6:	fa00 f203 	lsl.w	r2, r0, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
 8001302:	e01b      	b.n	800133c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3b41      	subs	r3, #65	; 0x41
 8001316:	221f      	movs	r2, #31
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	4019      	ands	r1, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b41      	subs	r3, #65	; 0x41
 8001330:	fa00 f203 	lsl.w	r2, r0, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d91c      	bls.n	800137e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	3b1e      	subs	r3, #30
 8001356:	2207      	movs	r2, #7
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	4019      	ands	r1, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	3b1e      	subs	r3, #30
 8001370:	fa00 f203 	lsl.w	r2, r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	e019      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6919      	ldr	r1, [r3, #16]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	2207      	movs	r2, #7
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	4019      	ands	r1, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6898      	ldr	r0, [r3, #8]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b10      	cmp	r3, #16
 80013b8:	d003      	beq.n	80013c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013be:	2b11      	cmp	r3, #17
 80013c0:	d132      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_ADC_ConfigChannel+0x1e4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d125      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d126      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d11a      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_ADC_ConfigChannel+0x1e8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <HAL_ADC_ConfigChannel+0x1ec>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9a      	lsrs	r2, r3, #18
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001408:	e002      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3b01      	subs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_ADC_ConfigChannel+0x1b2>
 8001416:	e007      	b.n	8001428 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	f043 0220 	orr.w	r2, r3, #32
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40012400 	.word	0x40012400
 8001440:	20000004 	.word	0x20000004
 8001444:	431bde83 	.word	0x431bde83

08001448 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b01      	cmp	r3, #1
 8001464:	d040      	beq.n	80014e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <ADC_Enable+0xac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <ADC_Enable+0xb0>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001484:	e002      	b.n	800148c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3b01      	subs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f9      	bne.n	8001486 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001492:	f7ff fc4b 	bl	8000d2c <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001498:	e01f      	b.n	80014da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800149a:	f7ff fc47 	bl	8000d2c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d918      	bls.n	80014da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d011      	beq.n	80014da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e007      	b.n	80014ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d1d8      	bne.n	800149a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000004 	.word	0x20000004
 80014f8:	431bde83 	.word	0x431bde83

080014fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d12e      	bne.n	8001574 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001526:	f7ff fc01 	bl	8000d2c <HAL_GetTick>
 800152a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800152c:	e01b      	b.n	8001566 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800152e:	f7ff fbfd 	bl	8000d2c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d914      	bls.n	8001566 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10d      	bne.n	8001566 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e007      	b.n	8001576 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d0dc      	beq.n	800152e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <__NVIC_EnableIRQ+0x34>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff2d 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff42 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff35 	bl	80015f4 <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d008      	beq.n	80017d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2204      	movs	r2, #4
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e020      	b.n	8001814 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 020e 	bic.w	r2, r2, #14
 80017e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
	...

08001820 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001832:	2b02      	cmp	r3, #2
 8001834:	d005      	beq.n	8001842 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2204      	movs	r2, #4
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e051      	b.n	80018e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 020e 	bic.w	r2, r2, #14
 8001850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_DMA_Abort_IT+0xd0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d029      	beq.n	80018c0 <HAL_DMA_Abort_IT+0xa0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <HAL_DMA_Abort_IT+0xd4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d022      	beq.n	80018bc <HAL_DMA_Abort_IT+0x9c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1f      	ldr	r2, [pc, #124]	; (80018f8 <HAL_DMA_Abort_IT+0xd8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d01a      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x96>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_DMA_Abort_IT+0xdc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x90>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_DMA_Abort_IT+0xe0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00a      	beq.n	80018aa <HAL_DMA_Abort_IT+0x8a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <HAL_DMA_Abort_IT+0xe4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <HAL_DMA_Abort_IT+0x84>
 800189e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018a2:	e00e      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a8:	e00b      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ae:	e008      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	e005      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ba:	e002      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018bc:	2310      	movs	r3, #16
 80018be:	e000      	b.n	80018c2 <HAL_DMA_Abort_IT+0xa2>
 80018c0:	2301      	movs	r3, #1
 80018c2:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_DMA_Abort_IT+0xe8>)
 80018c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
    } 
  }
  return status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40020008 	.word	0x40020008
 80018f4:	4002001c 	.word	0x4002001c
 80018f8:	40020030 	.word	0x40020030
 80018fc:	40020044 	.word	0x40020044
 8001900:	40020058 	.word	0x40020058
 8001904:	4002006c 	.word	0x4002006c
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e148      	b.n	8001bb2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001920:	2201      	movs	r2, #1
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8137 	bne.w	8001bac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4aa3      	ldr	r2, [pc, #652]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d05e      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001948:	4aa1      	ldr	r2, [pc, #644]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d875      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800194e:	4aa1      	ldr	r2, [pc, #644]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d058      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001954:	4a9f      	ldr	r2, [pc, #636]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d86f      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800195a:	4a9f      	ldr	r2, [pc, #636]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001960:	4a9d      	ldr	r2, [pc, #628]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d869      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001966:	4a9d      	ldr	r2, [pc, #628]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04c      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 800196c:	4a9b      	ldr	r2, [pc, #620]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d863      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001972:	4a9b      	ldr	r2, [pc, #620]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d046      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001978:	4a99      	ldr	r2, [pc, #612]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d85d      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d82a      	bhi.n	80019d8 <HAL_GPIO_Init+0xcc>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d859      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_GPIO_Init+0x80>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a07 	.word	0x08001a07
 8001990:	080019e1 	.word	0x080019e1
 8001994:	080019f3 	.word	0x080019f3
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a3b 	.word	0x08001a3b
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a3b 	.word	0x08001a3b
 80019ac:	08001a3b 	.word	0x08001a3b
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a3b 	.word	0x08001a3b
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a3b 	.word	0x08001a3b
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a3b 	.word	0x08001a3b
 80019c8:	08001a3b 	.word	0x08001a3b
 80019cc:	08001a3b 	.word	0x08001a3b
 80019d0:	080019e9 	.word	0x080019e9
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	4a82      	ldr	r2, [pc, #520]	; (8001be4 <HAL_GPIO_Init+0x2d8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e029      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e024      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01f      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e01a      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e013      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          break;
 8001a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_Init+0x13a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_Init+0x13e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_Init+0x14c>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x152>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	6a39      	ldr	r1, [r7, #32]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8090 	beq.w	8001bac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x2e4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_Init+0x1e0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x1dc>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_Init+0x1d8>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001aec:	2300      	movs	r3, #0
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	493b      	ldr	r1, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4937      	ldr	r1, [pc, #220]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4933      	ldr	r1, [pc, #204]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	492d      	ldr	r1, [pc, #180]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4923      	ldr	r1, [pc, #140]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491f      	ldr	r1, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4919      	ldr	r1, [pc, #100]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4915      	ldr	r1, [pc, #84]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3301      	adds	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f aeaf 	bne.w	8001920 <HAL_GPIO_Init+0x14>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	372c      	adds	r7, #44	; 0x2c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c1c:	e003      	b.n	8001c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	611a      	str	r2, [r3, #16]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e26c      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8087 	beq.w	8001d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c50:	4b92      	ldr	r3, [pc, #584]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d00c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c5c:	4b8f      	ldr	r3, [pc, #572]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d112      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5e>
 8001c68:	4b8c      	ldr	r3, [pc, #560]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d10b      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c76:	4b89      	ldr	r3, [pc, #548]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d06c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x12c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d168      	bne.n	8001d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e246      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x76>
 8001c98:	4b80      	ldr	r3, [pc, #512]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a7f      	ldr	r2, [pc, #508]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e02e      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x98>
 8001cae:	4b7b      	ldr	r3, [pc, #492]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7a      	ldr	r2, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a77      	ldr	r2, [pc, #476]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0xbc>
 8001cd2:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a71      	ldr	r2, [pc, #452]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6e      	ldr	r2, [pc, #440]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cec:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a67      	ldr	r2, [pc, #412]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f80e 	bl	8000d2c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f80a 	bl	8000d2c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1fa      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe4>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe fffa 	bl	8000d2c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fff6 	bl	8000d2c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1e6      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x10c>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6a:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x18c>
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x176>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1ba      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4939      	ldr	r1, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe ffaf 	bl	8000d2c <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7fe ffab 	bl	8000d2c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e19b      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4927      	ldr	r1, [pc, #156]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff8e 	bl	8000d2c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e14:	f7fe ff8a 	bl	8000d2c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e17a      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03a      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCC_OscConfig+0x274>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7fe ff6e 	bl	8000d2c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7fe ff6a 	bl	8000d2c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e15a      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f000 fad8 	bl	8002428 <RCC_Delay>
 8001e78:	e01c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7fe ff54 	bl	8000d2c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e88:	f7fe ff50 	bl	8000d2c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d908      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e140      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	42420000 	.word	0x42420000
 8001ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e9      	bne.n	8001e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a6 	beq.w	800200e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec6:	4b97      	ldr	r3, [pc, #604]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b94      	ldr	r3, [pc, #592]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a93      	ldr	r2, [pc, #588]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b8e      	ldr	r3, [pc, #568]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b8b      	ldr	r3, [pc, #556]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a8a      	ldr	r2, [pc, #552]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7fe ff11 	bl	8000d2c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7fe ff0d 	bl	8000d2c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0fd      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x312>
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	e02d      	b.n	8001f9e <HAL_RCC_OscConfig+0x36e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x334>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b73      	ldr	r3, [pc, #460]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a72      	ldr	r2, [pc, #456]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	e01c      	b.n	8001f9e <HAL_RCC_OscConfig+0x36e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x356>
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a6c      	ldr	r2, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a69      	ldr	r2, [pc, #420]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	e00b      	b.n	8001f9e <HAL_RCC_OscConfig+0x36e>
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a66      	ldr	r2, [pc, #408]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a63      	ldr	r2, [pc, #396]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d015      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fec1 	bl	8000d2c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe febd 	bl	8000d2c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0ab      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ee      	beq.n	8001fae <HAL_RCC_OscConfig+0x37e>
 8001fd0:	e014      	b.n	8001ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe feab 	bl	8000d2c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fea7 	bl	8000d2c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e095      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ee      	bne.n	8001fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8081 	beq.w	800211a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002018:	4b42      	ldr	r3, [pc, #264]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d061      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d146      	bne.n	80020ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x4fc>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fe7b 	bl	8000d2c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fe77 	bl	8000d2c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e067      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	4b35      	ldr	r3, [pc, #212]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d108      	bne.n	8002074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a19      	ldr	r1, [r3, #32]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	430b      	orrs	r3, r1
 8002086:	4927      	ldr	r1, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x4fc>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fe4b 	bl	8000d2c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe fe47 	bl	8000d2c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e037      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x46a>
 80020b8:	e02f      	b.n	800211a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_OscConfig+0x4fc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fe34 	bl	8000d2c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe fe30 	bl	8000d2c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e020      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x498>
 80020e6:	e018      	b.n	800211a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e013      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	42420060 	.word	0x42420060

08002130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0d0      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4965      	ldr	r1, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e073      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06b      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4936      	ldr	r1, [pc, #216]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7fe fd84 	bl	8000d2c <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7fe fd80 	bl	8000d2c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e053      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d210      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4922      	ldr	r1, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1cc>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fce2 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08004a18 	.word	0x08004a18
 80022fc:	20000004 	.word	0x20000004
 8002300:	2000000c 	.word	0x2000000c

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b490      	push	{r4, r7}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800230c:	1d3c      	adds	r4, r7, #4
 800230e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002314:	f240 2301 	movw	r3, #513	; 0x201
 8002318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	e02d      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e02d      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002356:	4413      	add	r3, r2
 8002358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800235c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c5b      	lsrs	r3, r3, #17
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800237c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	fb02 f203 	mul.w	r2, r2, r3
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e004      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	623b      	str	r3, [r7, #32]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc90      	pop	{r4, r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08004a08 	.word	0x08004a08
 80023b8:	40021000 	.word	0x40021000
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	003d0900 	.word	0x003d0900

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023dc:	f7ff fff2 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08004a28 	.word	0x08004a28

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002404:	f7ff ffde 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	08004a28 	.word	0x08004a28

08002428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <RCC_Delay+0x34>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <RCC_Delay+0x38>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a5b      	lsrs	r3, r3, #9
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002444:	bf00      	nop
  }
  while (Delay --);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <RCC_Delay+0x1c>
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000004 	.word	0x20000004
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d07d      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002484:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	61d3      	str	r3, [r2, #28]
 800249c:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d118      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b8:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fc32 	bl	8000d2c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	e008      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7fe fc2e 	bl	8000d2c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e06d      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ea:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d02e      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d027      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002518:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800251e:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d014      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fbfd 	bl	8000d2c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fbf9 	bl	8000d2c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e036      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4917      	ldr	r1, [pc, #92]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	4313      	orrs	r3, r2
 8002568:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	490b      	ldr	r1, [pc, #44]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4904      	ldr	r1, [pc, #16]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42420440 	.word	0x42420440

080025d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e041      	b.n	8002666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe f898 	bl	800072c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 fa6a 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d001      	beq.n	8002688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e035      	b.n	80026f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_TIM_Base_Start_IT+0x90>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x4e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d004      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x4e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_TIM_Base_Start_IT+0x94>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d111      	bne.n	80026e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b06      	cmp	r3, #6
 80026ce:	d010      	beq.n	80026f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	e007      	b.n	80026f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40000400 	.word	0x40000400

08002708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b02      	cmp	r3, #2
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0202 	mvn.w	r2, #2
 8002734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9b1 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f9a4 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9b3 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0204 	mvn.w	r2, #4
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f987 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f97a 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f989 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0208 	mvn.w	r2, #8
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f95d 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f950 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f95f 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b10      	cmp	r3, #16
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0210 	mvn.w	r2, #16
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2208      	movs	r2, #8
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f933 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f926 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f935 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0201 	mvn.w	r2, #1
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fd fe2e 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa67 	bl	8002d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8f9 	bl	8002ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0220 	mvn.w	r2, #32
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa32 	bl	8002d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x18>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b3      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x180>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800294e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002956:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	d03e      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xd0>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296e:	f200 8087 	bhi.w	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	f000 8085 	beq.w	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297e:	d87f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d01a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xa2>
 8002984:	2b70      	cmp	r3, #112	; 0x70
 8002986:	d87b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d050      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x116>
 800298c:	2b60      	cmp	r3, #96	; 0x60
 800298e:	d877      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d03c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xf6>
 8002994:	2b50      	cmp	r3, #80	; 0x50
 8002996:	d873      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x136>
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d86f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x156>
 80029a4:	2b30      	cmp	r3, #48	; 0x30
 80029a6:	d86b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d060      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x156>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d867      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x156>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d05a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029b8:	e062      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f000 f95c 	bl	8002c86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	609a      	str	r2, [r3, #8]
      break;
 80029e6:	e04e      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f000 f945 	bl	8002c86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e03b      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 f8bc 	bl	8002b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2150      	movs	r1, #80	; 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f913 	bl	8002c52 <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e02b      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f8da 	bl	8002bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2160      	movs	r1, #96	; 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f903 	bl	8002c52 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e01b      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 f89c 	bl	8002b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	; 0x40
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f8f3 	bl	8002c52 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e00b      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 f8ea 	bl	8002c52 <TIM_ITRx_SetConfig>
        break;
 8002a7e:	e002      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <TIM_Base_SetConfig+0xa8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d007      	beq.n	8002b10 <TIM_Base_SetConfig+0x28>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0x28>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <TIM_Base_SetConfig+0xac>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d108      	bne.n	8002b22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <TIM_Base_SetConfig+0xa8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0x52>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0x52>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <TIM_Base_SetConfig+0xac>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <TIM_Base_SetConfig+0xa8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d103      	bne.n	8002b80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	615a      	str	r2, [r3, #20]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40000400 	.word	0x40000400

08002b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 030a 	bic.w	r3, r3, #10
 8002bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0210 	bic.w	r2, r3, #16
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	621a      	str	r2, [r3, #32]
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f043 0307 	orr.w	r3, r3, #7
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	609a      	str	r2, [r3, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b087      	sub	sp, #28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	609a      	str	r2, [r3, #8]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e041      	b.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d004      	beq.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10c      	bne.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400

08002d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e03f      	b.n	8002e2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd fcd8 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fd27 	bl	8003830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b08a      	sub	sp, #40	; 0x28
 8002e36:	af02      	add	r7, sp, #8
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d17c      	bne.n	8002f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_Transmit+0x2c>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e075      	b.n	8002f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Transmit+0x3e>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e06e      	b.n	8002f4e <HAL_UART_Transmit+0x11c>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2221      	movs	r2, #33	; 0x21
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e86:	f7fd ff51 	bl	8000d2c <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_UART_Transmit+0x82>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ec4:	e02a      	b.n	8002f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fada 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e036      	b.n	8002f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e007      	b.n	8002f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1cf      	bne.n	8002ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 faaa 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e006      	b.n	8002f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 808c 	bne.w	8003090 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_Receive+0x2e>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e084      	b.n	8003092 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Receive+0x40>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e07d      	b.n	8003092 <HAL_UART_Receive+0x13c>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2222      	movs	r2, #34	; 0x22
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd febb 	bl	8000d2c <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_UART_Receive+0x8a>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ff0:	e043      	b.n	800307a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fa44 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e042      	b.n	8003092 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	b29a      	uxth	r2, r3
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	3302      	adds	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e01f      	b.n	800306c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	d007      	beq.n	8003046 <HAL_UART_Receive+0xf0>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_UART_Receive+0xfe>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e008      	b.n	8003066 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003060:	b2da      	uxtb	r2, r3
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1b6      	bne.n	8002ff2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d11d      	bne.n	80030f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_UART_Receive_IT+0x26>
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e016      	b.n	80030f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Receive_IT+0x38>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e00f      	b.n	80030f2 <HAL_UART_Receive_IT+0x58>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fa19 	bl	800351e <UART_Start_Receive_IT>
 80030ec:	4603      	mov	r3, r0
 80030ee:	e000      	b.n	80030f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_UART_IRQHandler+0x52>
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fac9 	bl	80036de <UART_Receive_IT>
      return;
 800314c:	e17b      	b.n	8003446 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80b1 	beq.w	80032b8 <HAL_UART_IRQHandler+0x1bc>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_UART_IRQHandler+0x70>
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80a6 	beq.w	80032b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_UART_IRQHandler+0x90>
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_UART_IRQHandler+0xb0>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_UART_IRQHandler+0xd0>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00f      	beq.n	80031f6 <HAL_UART_IRQHandler+0xfa>
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <HAL_UART_IRQHandler+0xee>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f043 0208 	orr.w	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 811e 	beq.w	800343c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_UART_IRQHandler+0x11e>
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa62 	bl	80036de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <HAL_UART_IRQHandler+0x146>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d031      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9a4 	bl	8003590 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d023      	beq.n	800329e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003264:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	2b00      	cmp	r3, #0
 800326c:	d013      	beq.n	8003296 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	4a76      	ldr	r2, [pc, #472]	; (800344c <HAL_UART_IRQHandler+0x350>)
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe fad0 	bl	8001820 <HAL_DMA_Abort_IT>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003290:	4610      	mov	r0, r2
 8003292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e00e      	b.n	80032b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8e3 	bl	8003462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	e00a      	b.n	80032b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8df 	bl	8003462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e006      	b.n	80032b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8db 	bl	8003462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032b2:	e0c3      	b.n	800343c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	bf00      	nop
    return;
 80032b6:	e0c1      	b.n	800343c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 80a1 	bne.w	8003404 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 809b 	beq.w	8003404 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8095 	beq.w	8003404 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04e      	beq.n	800339c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003308:	8a3b      	ldrh	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8098 	beq.w	8003440 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003314:	8a3a      	ldrh	r2, [r7, #16]
 8003316:	429a      	cmp	r2, r3
 8003318:	f080 8092 	bcs.w	8003440 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8a3a      	ldrh	r2, [r7, #16]
 8003320:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b20      	cmp	r3, #32
 800332a:	d02b      	beq.n	8003384 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800333a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0210 	bic.w	r2, r2, #16
 8003378:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fa13 	bl	80017aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800338c:	b29b      	uxth	r3, r3
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	b29b      	uxth	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f86d 	bl	8003474 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800339a:	e051      	b.n	8003440 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d047      	beq.n	8003444 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80033b4:	8a7b      	ldrh	r3, [r7, #18]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033f8:	8a7b      	ldrh	r3, [r7, #18]
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f839 	bl	8003474 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003402:	e01f      	b.n	8003444 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_UART_IRQHandler+0x324>
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8f9 	bl	8003610 <UART_Transmit_IT>
    return;
 800341e:	e012      	b.n	8003446 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <HAL_UART_IRQHandler+0x34a>
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f93a 	bl	80036ae <UART_EndTransmit_IT>
    return;
 800343a:	e004      	b.n	8003446 <HAL_UART_IRQHandler+0x34a>
    return;
 800343c:	bf00      	nop
 800343e:	e002      	b.n	8003446 <HAL_UART_IRQHandler+0x34a>
      return;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <HAL_UART_IRQHandler+0x34a>
      return;
 8003444:	bf00      	nop
  }
}
 8003446:	3728      	adds	r7, #40	; 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	080035e9 	.word	0x080035e9

08003450 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349a:	e02c      	b.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d028      	beq.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <UART_WaitOnFlagUntilTimeout+0x30>
 80034aa:	f7fd fc3f 	bl	8000d2c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d21d      	bcs.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00f      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d0c3      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	4613      	mov	r3, r2
 800352a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2222      	movs	r2, #34	; 0x22
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0210 	bic.w	r2, r2, #16
 80035ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff2d 	bl	8003462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b21      	cmp	r3, #33	; 0x21
 8003622:	d13e      	bne.n	80036a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d114      	bne.n	8003658 <UART_Transmit_IT+0x48>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d110      	bne.n	8003658 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	1c9a      	adds	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]
 8003656:	e008      	b.n	800366a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	1c59      	adds	r1, r3, #1
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6211      	str	r1, [r2, #32]
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4619      	mov	r1, r3
 8003678:	84d1      	strh	r1, [r2, #38]	; 0x26
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff febe 	bl	8003450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b22      	cmp	r3, #34	; 0x22
 80036f0:	f040 8099 	bne.w	8003826 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d117      	bne.n	800372e <UART_Receive_IT+0x50>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d113      	bne.n	800372e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371c:	b29a      	uxth	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	1c9a      	adds	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28
 800372c:	e026      	b.n	800377c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d007      	beq.n	8003752 <UART_Receive_IT+0x74>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <UART_Receive_IT+0x82>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e008      	b.n	8003772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376c:	b2da      	uxtb	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29b      	uxth	r3, r3
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4619      	mov	r1, r3
 800378a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800378c:	2b00      	cmp	r3, #0
 800378e:	d148      	bne.n	8003822 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0220 	bic.w	r2, r2, #32
 800379e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d123      	bne.n	8003818 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0210 	bic.w	r2, r2, #16
 80037e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d10a      	bne.n	800380a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fe2f 	bl	8003474 <HAL_UARTEx_RxEventCallback>
 8003816:	e002      	b.n	800381e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fc fca1 	bl	8000160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e002      	b.n	8003828 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800386a:	f023 030c 	bic.w	r3, r3, #12
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	430b      	orrs	r3, r1
 8003876:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <UART_SetConfig+0x114>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d103      	bne.n	80038a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7fe fdb2 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	e002      	b.n	80038a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038a0:	f7fe fd9a 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80038a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009a      	lsls	r2, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <UART_SetConfig+0x118>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	0119      	lsls	r1, r3, #4
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009a      	lsls	r2, r3, #2
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <UART_SetConfig+0x118>)
 80038de:	fba3 0302 	umull	r0, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2064      	movs	r0, #100	; 0x64
 80038e6:	fb00 f303 	mul.w	r3, r0, r3
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	3332      	adds	r3, #50	; 0x32
 80038f0:	4a15      	ldr	r2, [pc, #84]	; (8003948 <UART_SetConfig+0x118>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fc:	4419      	add	r1, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fbb2 f2f3 	udiv	r2, r2, r3
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <UART_SetConfig+0x118>)
 8003916:	fba3 0302 	umull	r0, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2064      	movs	r0, #100	; 0x64
 800391e:	fb00 f303 	mul.w	r3, r0, r3
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	3332      	adds	r3, #50	; 0x32
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <UART_SetConfig+0x118>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	440a      	add	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40013800 	.word	0x40013800
 8003948:	51eb851f 	.word	0x51eb851f

0800394c <__errno>:
 800394c:	4b01      	ldr	r3, [pc, #4]	; (8003954 <__errno+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000014 	.word	0x20000014

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	2600      	movs	r6, #0
 800395c:	4d0c      	ldr	r5, [pc, #48]	; (8003990 <__libc_init_array+0x38>)
 800395e:	4c0d      	ldr	r4, [pc, #52]	; (8003994 <__libc_init_array+0x3c>)
 8003960:	1b64      	subs	r4, r4, r5
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	f000 fff8 	bl	800495c <_init>
 800396c:	2600      	movs	r6, #0
 800396e:	4d0a      	ldr	r5, [pc, #40]	; (8003998 <__libc_init_array+0x40>)
 8003970:	4c0a      	ldr	r4, [pc, #40]	; (800399c <__libc_init_array+0x44>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	08004ad8 	.word	0x08004ad8
 8003994:	08004ad8 	.word	0x08004ad8
 8003998:	08004ad8 	.word	0x08004ad8
 800399c:	08004adc 	.word	0x08004adc

080039a0 <memset>:
 80039a0:	4603      	mov	r3, r0
 80039a2:	4402      	add	r2, r0
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d100      	bne.n	80039aa <memset+0xa>
 80039a8:	4770      	bx	lr
 80039aa:	f803 1b01 	strb.w	r1, [r3], #1
 80039ae:	e7f9      	b.n	80039a4 <memset+0x4>

080039b0 <iprintf>:
 80039b0:	b40f      	push	{r0, r1, r2, r3}
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <iprintf+0x2c>)
 80039b4:	b513      	push	{r0, r1, r4, lr}
 80039b6:	681c      	ldr	r4, [r3, #0]
 80039b8:	b124      	cbz	r4, 80039c4 <iprintf+0x14>
 80039ba:	69a3      	ldr	r3, [r4, #24]
 80039bc:	b913      	cbnz	r3, 80039c4 <iprintf+0x14>
 80039be:	4620      	mov	r0, r4
 80039c0:	f000 fa5e 	bl	8003e80 <__sinit>
 80039c4:	ab05      	add	r3, sp, #20
 80039c6:	4620      	mov	r0, r4
 80039c8:	9a04      	ldr	r2, [sp, #16]
 80039ca:	68a1      	ldr	r1, [r4, #8]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	f000 fc29 	bl	8004224 <_vfiprintf_r>
 80039d2:	b002      	add	sp, #8
 80039d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039d8:	b004      	add	sp, #16
 80039da:	4770      	bx	lr
 80039dc:	20000014 	.word	0x20000014

080039e0 <_puts_r>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	460e      	mov	r6, r1
 80039e4:	4605      	mov	r5, r0
 80039e6:	b118      	cbz	r0, 80039f0 <_puts_r+0x10>
 80039e8:	6983      	ldr	r3, [r0, #24]
 80039ea:	b90b      	cbnz	r3, 80039f0 <_puts_r+0x10>
 80039ec:	f000 fa48 	bl	8003e80 <__sinit>
 80039f0:	69ab      	ldr	r3, [r5, #24]
 80039f2:	68ac      	ldr	r4, [r5, #8]
 80039f4:	b913      	cbnz	r3, 80039fc <_puts_r+0x1c>
 80039f6:	4628      	mov	r0, r5
 80039f8:	f000 fa42 	bl	8003e80 <__sinit>
 80039fc:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <_puts_r+0xd0>)
 80039fe:	429c      	cmp	r4, r3
 8003a00:	d120      	bne.n	8003a44 <_puts_r+0x64>
 8003a02:	686c      	ldr	r4, [r5, #4]
 8003a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a06:	07db      	lsls	r3, r3, #31
 8003a08:	d405      	bmi.n	8003a16 <_puts_r+0x36>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	0598      	lsls	r0, r3, #22
 8003a0e:	d402      	bmi.n	8003a16 <_puts_r+0x36>
 8003a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a12:	f000 fad3 	bl	8003fbc <__retarget_lock_acquire_recursive>
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	0719      	lsls	r1, r3, #28
 8003a1a:	d51d      	bpl.n	8003a58 <_puts_r+0x78>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	b1db      	cbz	r3, 8003a58 <_puts_r+0x78>
 8003a20:	3e01      	subs	r6, #1
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60a3      	str	r3, [r4, #8]
 8003a2c:	bb39      	cbnz	r1, 8003a7e <_puts_r+0x9e>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da38      	bge.n	8003aa4 <_puts_r+0xc4>
 8003a32:	4622      	mov	r2, r4
 8003a34:	210a      	movs	r1, #10
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f848 	bl	8003acc <__swbuf_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d011      	beq.n	8003a64 <_puts_r+0x84>
 8003a40:	250a      	movs	r5, #10
 8003a42:	e011      	b.n	8003a68 <_puts_r+0x88>
 8003a44:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <_puts_r+0xd4>)
 8003a46:	429c      	cmp	r4, r3
 8003a48:	d101      	bne.n	8003a4e <_puts_r+0x6e>
 8003a4a:	68ac      	ldr	r4, [r5, #8]
 8003a4c:	e7da      	b.n	8003a04 <_puts_r+0x24>
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <_puts_r+0xd8>)
 8003a50:	429c      	cmp	r4, r3
 8003a52:	bf08      	it	eq
 8003a54:	68ec      	ldreq	r4, [r5, #12]
 8003a56:	e7d5      	b.n	8003a04 <_puts_r+0x24>
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 f888 	bl	8003b70 <__swsetup_r>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d0dd      	beq.n	8003a20 <_puts_r+0x40>
 8003a64:	f04f 35ff 	mov.w	r5, #4294967295
 8003a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a6a:	07da      	lsls	r2, r3, #31
 8003a6c:	d405      	bmi.n	8003a7a <_puts_r+0x9a>
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	059b      	lsls	r3, r3, #22
 8003a72:	d402      	bmi.n	8003a7a <_puts_r+0x9a>
 8003a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a76:	f000 faa2 	bl	8003fbe <__retarget_lock_release_recursive>
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da04      	bge.n	8003a8c <_puts_r+0xac>
 8003a82:	69a2      	ldr	r2, [r4, #24]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	dc06      	bgt.n	8003a96 <_puts_r+0xb6>
 8003a88:	290a      	cmp	r1, #10
 8003a8a:	d004      	beq.n	8003a96 <_puts_r+0xb6>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	6022      	str	r2, [r4, #0]
 8003a92:	7019      	strb	r1, [r3, #0]
 8003a94:	e7c5      	b.n	8003a22 <_puts_r+0x42>
 8003a96:	4622      	mov	r2, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f817 	bl	8003acc <__swbuf_r>
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d1bf      	bne.n	8003a22 <_puts_r+0x42>
 8003aa2:	e7df      	b.n	8003a64 <_puts_r+0x84>
 8003aa4:	250a      	movs	r5, #10
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	6022      	str	r2, [r4, #0]
 8003aac:	701d      	strb	r5, [r3, #0]
 8003aae:	e7db      	b.n	8003a68 <_puts_r+0x88>
 8003ab0:	08004a64 	.word	0x08004a64
 8003ab4:	08004a84 	.word	0x08004a84
 8003ab8:	08004a44 	.word	0x08004a44

08003abc <puts>:
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <puts+0xc>)
 8003abe:	4601      	mov	r1, r0
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f7ff bf8d 	b.w	80039e0 <_puts_r>
 8003ac6:	bf00      	nop
 8003ac8:	20000014 	.word	0x20000014

08003acc <__swbuf_r>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	460e      	mov	r6, r1
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	b118      	cbz	r0, 8003ade <__swbuf_r+0x12>
 8003ad6:	6983      	ldr	r3, [r0, #24]
 8003ad8:	b90b      	cbnz	r3, 8003ade <__swbuf_r+0x12>
 8003ada:	f000 f9d1 	bl	8003e80 <__sinit>
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <__swbuf_r+0x98>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d12b      	bne.n	8003b3c <__swbuf_r+0x70>
 8003ae4:	686c      	ldr	r4, [r5, #4]
 8003ae6:	69a3      	ldr	r3, [r4, #24]
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	071a      	lsls	r2, r3, #28
 8003aee:	d52f      	bpl.n	8003b50 <__swbuf_r+0x84>
 8003af0:	6923      	ldr	r3, [r4, #16]
 8003af2:	b36b      	cbz	r3, 8003b50 <__swbuf_r+0x84>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	b2f6      	uxtb	r6, r6
 8003afa:	1ac0      	subs	r0, r0, r3
 8003afc:	6963      	ldr	r3, [r4, #20]
 8003afe:	4637      	mov	r7, r6
 8003b00:	4283      	cmp	r3, r0
 8003b02:	dc04      	bgt.n	8003b0e <__swbuf_r+0x42>
 8003b04:	4621      	mov	r1, r4
 8003b06:	4628      	mov	r0, r5
 8003b08:	f000 f926 	bl	8003d58 <_fflush_r>
 8003b0c:	bb30      	cbnz	r0, 8003b5c <__swbuf_r+0x90>
 8003b0e:	68a3      	ldr	r3, [r4, #8]
 8003b10:	3001      	adds	r0, #1
 8003b12:	3b01      	subs	r3, #1
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	6022      	str	r2, [r4, #0]
 8003b1c:	701e      	strb	r6, [r3, #0]
 8003b1e:	6963      	ldr	r3, [r4, #20]
 8003b20:	4283      	cmp	r3, r0
 8003b22:	d004      	beq.n	8003b2e <__swbuf_r+0x62>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	07db      	lsls	r3, r3, #31
 8003b28:	d506      	bpl.n	8003b38 <__swbuf_r+0x6c>
 8003b2a:	2e0a      	cmp	r6, #10
 8003b2c:	d104      	bne.n	8003b38 <__swbuf_r+0x6c>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f911 	bl	8003d58 <_fflush_r>
 8003b36:	b988      	cbnz	r0, 8003b5c <__swbuf_r+0x90>
 8003b38:	4638      	mov	r0, r7
 8003b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <__swbuf_r+0x9c>)
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d101      	bne.n	8003b46 <__swbuf_r+0x7a>
 8003b42:	68ac      	ldr	r4, [r5, #8]
 8003b44:	e7cf      	b.n	8003ae6 <__swbuf_r+0x1a>
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <__swbuf_r+0xa0>)
 8003b48:	429c      	cmp	r4, r3
 8003b4a:	bf08      	it	eq
 8003b4c:	68ec      	ldreq	r4, [r5, #12]
 8003b4e:	e7ca      	b.n	8003ae6 <__swbuf_r+0x1a>
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 f80c 	bl	8003b70 <__swsetup_r>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d0cb      	beq.n	8003af4 <__swbuf_r+0x28>
 8003b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8003b60:	e7ea      	b.n	8003b38 <__swbuf_r+0x6c>
 8003b62:	bf00      	nop
 8003b64:	08004a64 	.word	0x08004a64
 8003b68:	08004a84 	.word	0x08004a84
 8003b6c:	08004a44 	.word	0x08004a44

08003b70 <__swsetup_r>:
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <__swsetup_r+0xcc>)
 8003b72:	b570      	push	{r4, r5, r6, lr}
 8003b74:	681d      	ldr	r5, [r3, #0]
 8003b76:	4606      	mov	r6, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	b125      	cbz	r5, 8003b86 <__swsetup_r+0x16>
 8003b7c:	69ab      	ldr	r3, [r5, #24]
 8003b7e:	b913      	cbnz	r3, 8003b86 <__swsetup_r+0x16>
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 f97d 	bl	8003e80 <__sinit>
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <__swsetup_r+0xd0>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d10f      	bne.n	8003bac <__swsetup_r+0x3c>
 8003b8c:	686c      	ldr	r4, [r5, #4]
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b94:	0719      	lsls	r1, r3, #28
 8003b96:	d42c      	bmi.n	8003bf2 <__swsetup_r+0x82>
 8003b98:	06dd      	lsls	r5, r3, #27
 8003b9a:	d411      	bmi.n	8003bc0 <__swsetup_r+0x50>
 8003b9c:	2309      	movs	r3, #9
 8003b9e:	6033      	str	r3, [r6, #0]
 8003ba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	e03e      	b.n	8003c2a <__swsetup_r+0xba>
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <__swsetup_r+0xd4>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d101      	bne.n	8003bb6 <__swsetup_r+0x46>
 8003bb2:	68ac      	ldr	r4, [r5, #8]
 8003bb4:	e7eb      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <__swsetup_r+0xd8>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	bf08      	it	eq
 8003bbc:	68ec      	ldreq	r4, [r5, #12]
 8003bbe:	e7e6      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bc0:	0758      	lsls	r0, r3, #29
 8003bc2:	d512      	bpl.n	8003bea <__swsetup_r+0x7a>
 8003bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc6:	b141      	cbz	r1, 8003bda <__swsetup_r+0x6a>
 8003bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__swsetup_r+0x66>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 fa59 	bl	8004088 <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <__swsetup_r+0x9a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d003      	beq.n	8003c0a <__swsetup_r+0x9a>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f9ff 	bl	8004008 <__smakebuf_r>
 8003c0a:	89a0      	ldrh	r0, [r4, #12]
 8003c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c10:	f010 0301 	ands.w	r3, r0, #1
 8003c14:	d00a      	beq.n	8003c2c <__swsetup_r+0xbc>
 8003c16:	2300      	movs	r3, #0
 8003c18:	60a3      	str	r3, [r4, #8]
 8003c1a:	6963      	ldr	r3, [r4, #20]
 8003c1c:	425b      	negs	r3, r3
 8003c1e:	61a3      	str	r3, [r4, #24]
 8003c20:	6923      	ldr	r3, [r4, #16]
 8003c22:	b943      	cbnz	r3, 8003c36 <__swsetup_r+0xc6>
 8003c24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c28:	d1ba      	bne.n	8003ba0 <__swsetup_r+0x30>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	0781      	lsls	r1, r0, #30
 8003c2e:	bf58      	it	pl
 8003c30:	6963      	ldrpl	r3, [r4, #20]
 8003c32:	60a3      	str	r3, [r4, #8]
 8003c34:	e7f4      	b.n	8003c20 <__swsetup_r+0xb0>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7f7      	b.n	8003c2a <__swsetup_r+0xba>
 8003c3a:	bf00      	nop
 8003c3c:	20000014 	.word	0x20000014
 8003c40:	08004a64 	.word	0x08004a64
 8003c44:	08004a84 	.word	0x08004a84
 8003c48:	08004a44 	.word	0x08004a44

08003c4c <__sflush_r>:
 8003c4c:	898a      	ldrh	r2, [r1, #12]
 8003c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c52:	4605      	mov	r5, r0
 8003c54:	0710      	lsls	r0, r2, #28
 8003c56:	460c      	mov	r4, r1
 8003c58:	d458      	bmi.n	8003d0c <__sflush_r+0xc0>
 8003c5a:	684b      	ldr	r3, [r1, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dc05      	bgt.n	8003c6c <__sflush_r+0x20>
 8003c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dc02      	bgt.n	8003c6c <__sflush_r+0x20>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d0f9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c78:	682f      	ldr	r7, [r5, #0]
 8003c7a:	602b      	str	r3, [r5, #0]
 8003c7c:	d032      	beq.n	8003ce4 <__sflush_r+0x98>
 8003c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	075a      	lsls	r2, r3, #29
 8003c84:	d505      	bpl.n	8003c92 <__sflush_r+0x46>
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	1ac0      	subs	r0, r0, r3
 8003c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c8c:	b10b      	cbz	r3, 8003c92 <__sflush_r+0x46>
 8003c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c90:	1ac0      	subs	r0, r0, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	4602      	mov	r2, r0
 8003c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c98:	4628      	mov	r0, r5
 8003c9a:	6a21      	ldr	r1, [r4, #32]
 8003c9c:	47b0      	blx	r6
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	d106      	bne.n	8003cb2 <__sflush_r+0x66>
 8003ca4:	6829      	ldr	r1, [r5, #0]
 8003ca6:	291d      	cmp	r1, #29
 8003ca8:	d82c      	bhi.n	8003d04 <__sflush_r+0xb8>
 8003caa:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <__sflush_r+0x108>)
 8003cac:	40ca      	lsrs	r2, r1
 8003cae:	07d6      	lsls	r6, r2, #31
 8003cb0:	d528      	bpl.n	8003d04 <__sflush_r+0xb8>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	6062      	str	r2, [r4, #4]
 8003cb6:	6922      	ldr	r2, [r4, #16]
 8003cb8:	04d9      	lsls	r1, r3, #19
 8003cba:	6022      	str	r2, [r4, #0]
 8003cbc:	d504      	bpl.n	8003cc8 <__sflush_r+0x7c>
 8003cbe:	1c42      	adds	r2, r0, #1
 8003cc0:	d101      	bne.n	8003cc6 <__sflush_r+0x7a>
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	b903      	cbnz	r3, 8003cc8 <__sflush_r+0x7c>
 8003cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8003cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cca:	602f      	str	r7, [r5, #0]
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	d0ca      	beq.n	8003c66 <__sflush_r+0x1a>
 8003cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d002      	beq.n	8003cde <__sflush_r+0x92>
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f000 f9d5 	bl	8004088 <_free_r>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8003ce2:	e7c1      	b.n	8003c68 <__sflush_r+0x1c>
 8003ce4:	6a21      	ldr	r1, [r4, #32]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4628      	mov	r0, r5
 8003cea:	47b0      	blx	r6
 8003cec:	1c41      	adds	r1, r0, #1
 8003cee:	d1c7      	bne.n	8003c80 <__sflush_r+0x34>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0c4      	beq.n	8003c80 <__sflush_r+0x34>
 8003cf6:	2b1d      	cmp	r3, #29
 8003cf8:	d001      	beq.n	8003cfe <__sflush_r+0xb2>
 8003cfa:	2b16      	cmp	r3, #22
 8003cfc:	d101      	bne.n	8003d02 <__sflush_r+0xb6>
 8003cfe:	602f      	str	r7, [r5, #0]
 8003d00:	e7b1      	b.n	8003c66 <__sflush_r+0x1a>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	e7ad      	b.n	8003c68 <__sflush_r+0x1c>
 8003d0c:	690f      	ldr	r7, [r1, #16]
 8003d0e:	2f00      	cmp	r7, #0
 8003d10:	d0a9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003d12:	0793      	lsls	r3, r2, #30
 8003d14:	bf18      	it	ne
 8003d16:	2300      	movne	r3, #0
 8003d18:	680e      	ldr	r6, [r1, #0]
 8003d1a:	bf08      	it	eq
 8003d1c:	694b      	ldreq	r3, [r1, #20]
 8003d1e:	eba6 0807 	sub.w	r8, r6, r7
 8003d22:	600f      	str	r7, [r1, #0]
 8003d24:	608b      	str	r3, [r1, #8]
 8003d26:	f1b8 0f00 	cmp.w	r8, #0
 8003d2a:	dd9c      	ble.n	8003c66 <__sflush_r+0x1a>
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	463a      	mov	r2, r7
 8003d30:	4628      	mov	r0, r5
 8003d32:	6a21      	ldr	r1, [r4, #32]
 8003d34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d36:	47b0      	blx	r6
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	dc06      	bgt.n	8003d4a <__sflush_r+0xfe>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d46:	81a3      	strh	r3, [r4, #12]
 8003d48:	e78e      	b.n	8003c68 <__sflush_r+0x1c>
 8003d4a:	4407      	add	r7, r0
 8003d4c:	eba8 0800 	sub.w	r8, r8, r0
 8003d50:	e7e9      	b.n	8003d26 <__sflush_r+0xda>
 8003d52:	bf00      	nop
 8003d54:	20400001 	.word	0x20400001

08003d58 <_fflush_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	690b      	ldr	r3, [r1, #16]
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	b913      	cbnz	r3, 8003d68 <_fflush_r+0x10>
 8003d62:	2500      	movs	r5, #0
 8003d64:	4628      	mov	r0, r5
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	b118      	cbz	r0, 8003d72 <_fflush_r+0x1a>
 8003d6a:	6983      	ldr	r3, [r0, #24]
 8003d6c:	b90b      	cbnz	r3, 8003d72 <_fflush_r+0x1a>
 8003d6e:	f000 f887 	bl	8003e80 <__sinit>
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <_fflush_r+0x6c>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d11b      	bne.n	8003db0 <_fflush_r+0x58>
 8003d78:	686c      	ldr	r4, [r5, #4]
 8003d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ef      	beq.n	8003d62 <_fflush_r+0xa>
 8003d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d84:	07d0      	lsls	r0, r2, #31
 8003d86:	d404      	bmi.n	8003d92 <_fflush_r+0x3a>
 8003d88:	0599      	lsls	r1, r3, #22
 8003d8a:	d402      	bmi.n	8003d92 <_fflush_r+0x3a>
 8003d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d8e:	f000 f915 	bl	8003fbc <__retarget_lock_acquire_recursive>
 8003d92:	4628      	mov	r0, r5
 8003d94:	4621      	mov	r1, r4
 8003d96:	f7ff ff59 	bl	8003c4c <__sflush_r>
 8003d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	07da      	lsls	r2, r3, #31
 8003da0:	d4e0      	bmi.n	8003d64 <_fflush_r+0xc>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	059b      	lsls	r3, r3, #22
 8003da6:	d4dd      	bmi.n	8003d64 <_fflush_r+0xc>
 8003da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003daa:	f000 f908 	bl	8003fbe <__retarget_lock_release_recursive>
 8003dae:	e7d9      	b.n	8003d64 <_fflush_r+0xc>
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_fflush_r+0x70>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d101      	bne.n	8003dba <_fflush_r+0x62>
 8003db6:	68ac      	ldr	r4, [r5, #8]
 8003db8:	e7df      	b.n	8003d7a <_fflush_r+0x22>
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <_fflush_r+0x74>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	bf08      	it	eq
 8003dc0:	68ec      	ldreq	r4, [r5, #12]
 8003dc2:	e7da      	b.n	8003d7a <_fflush_r+0x22>
 8003dc4:	08004a64 	.word	0x08004a64
 8003dc8:	08004a84 	.word	0x08004a84
 8003dcc:	08004a44 	.word	0x08004a44

08003dd0 <std>:
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dde:	6083      	str	r3, [r0, #8]
 8003de0:	8181      	strh	r1, [r0, #12]
 8003de2:	6643      	str	r3, [r0, #100]	; 0x64
 8003de4:	81c2      	strh	r2, [r0, #14]
 8003de6:	6183      	str	r3, [r0, #24]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2208      	movs	r2, #8
 8003dec:	305c      	adds	r0, #92	; 0x5c
 8003dee:	f7ff fdd7 	bl	80039a0 <memset>
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <std+0x38>)
 8003df4:	6224      	str	r4, [r4, #32]
 8003df6:	6263      	str	r3, [r4, #36]	; 0x24
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <std+0x3c>)
 8003dfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <std+0x40>)
 8003dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <std+0x44>)
 8003e02:	6323      	str	r3, [r4, #48]	; 0x30
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	080047d1 	.word	0x080047d1
 8003e0c:	080047f3 	.word	0x080047f3
 8003e10:	0800482b 	.word	0x0800482b
 8003e14:	0800484f 	.word	0x0800484f

08003e18 <_cleanup_r>:
 8003e18:	4901      	ldr	r1, [pc, #4]	; (8003e20 <_cleanup_r+0x8>)
 8003e1a:	f000 b8af 	b.w	8003f7c <_fwalk_reent>
 8003e1e:	bf00      	nop
 8003e20:	08003d59 	.word	0x08003d59

08003e24 <__sfmoreglue>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	2568      	movs	r5, #104	; 0x68
 8003e28:	1e4a      	subs	r2, r1, #1
 8003e2a:	4355      	muls	r5, r2
 8003e2c:	460e      	mov	r6, r1
 8003e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e32:	f000 f975 	bl	8004120 <_malloc_r>
 8003e36:	4604      	mov	r4, r0
 8003e38:	b140      	cbz	r0, 8003e4c <__sfmoreglue+0x28>
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8003e40:	300c      	adds	r0, #12
 8003e42:	60a0      	str	r0, [r4, #8]
 8003e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e48:	f7ff fdaa 	bl	80039a0 <memset>
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}

08003e50 <__sfp_lock_acquire>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__sfp_lock_acquire+0x8>)
 8003e52:	f000 b8b3 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	200001c8 	.word	0x200001c8

08003e5c <__sfp_lock_release>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__sfp_lock_release+0x8>)
 8003e5e:	f000 b8ae 	b.w	8003fbe <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	200001c8 	.word	0x200001c8

08003e68 <__sinit_lock_acquire>:
 8003e68:	4801      	ldr	r0, [pc, #4]	; (8003e70 <__sinit_lock_acquire+0x8>)
 8003e6a:	f000 b8a7 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 8003e6e:	bf00      	nop
 8003e70:	200001c3 	.word	0x200001c3

08003e74 <__sinit_lock_release>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__sinit_lock_release+0x8>)
 8003e76:	f000 b8a2 	b.w	8003fbe <__retarget_lock_release_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	200001c3 	.word	0x200001c3

08003e80 <__sinit>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	f7ff fff0 	bl	8003e68 <__sinit_lock_acquire>
 8003e88:	69a3      	ldr	r3, [r4, #24]
 8003e8a:	b11b      	cbz	r3, 8003e94 <__sinit+0x14>
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e90:	f7ff bff0 	b.w	8003e74 <__sinit_lock_release>
 8003e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e98:	6523      	str	r3, [r4, #80]	; 0x50
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <__sinit+0x68>)
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <__sinit+0x6c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	bf08      	it	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	bf08      	it	eq
 8003eac:	61a3      	streq	r3, [r4, #24]
 8003eae:	f000 f81f 	bl	8003ef0 <__sfp>
 8003eb2:	6060      	str	r0, [r4, #4]
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 f81b 	bl	8003ef0 <__sfp>
 8003eba:	60a0      	str	r0, [r4, #8]
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f000 f817 	bl	8003ef0 <__sfp>
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	60e0      	str	r0, [r4, #12]
 8003ec8:	6860      	ldr	r0, [r4, #4]
 8003eca:	f7ff ff81 	bl	8003dd0 <std>
 8003ece:	2201      	movs	r2, #1
 8003ed0:	2109      	movs	r1, #9
 8003ed2:	68a0      	ldr	r0, [r4, #8]
 8003ed4:	f7ff ff7c 	bl	8003dd0 <std>
 8003ed8:	2202      	movs	r2, #2
 8003eda:	2112      	movs	r1, #18
 8003edc:	68e0      	ldr	r0, [r4, #12]
 8003ede:	f7ff ff77 	bl	8003dd0 <std>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61a3      	str	r3, [r4, #24]
 8003ee6:	e7d1      	b.n	8003e8c <__sinit+0xc>
 8003ee8:	08004a40 	.word	0x08004a40
 8003eec:	08003e19 	.word	0x08003e19

08003ef0 <__sfp>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	4607      	mov	r7, r0
 8003ef4:	f7ff ffac 	bl	8003e50 <__sfp_lock_acquire>
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <__sfp+0x84>)
 8003efa:	681e      	ldr	r6, [r3, #0]
 8003efc:	69b3      	ldr	r3, [r6, #24]
 8003efe:	b913      	cbnz	r3, 8003f06 <__sfp+0x16>
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff ffbd 	bl	8003e80 <__sinit>
 8003f06:	3648      	adds	r6, #72	; 0x48
 8003f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	d503      	bpl.n	8003f18 <__sfp+0x28>
 8003f10:	6833      	ldr	r3, [r6, #0]
 8003f12:	b30b      	cbz	r3, 8003f58 <__sfp+0x68>
 8003f14:	6836      	ldr	r6, [r6, #0]
 8003f16:	e7f7      	b.n	8003f08 <__sfp+0x18>
 8003f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f1c:	b9d5      	cbnz	r5, 8003f54 <__sfp+0x64>
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <__sfp+0x88>)
 8003f20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f24:	60e3      	str	r3, [r4, #12]
 8003f26:	6665      	str	r5, [r4, #100]	; 0x64
 8003f28:	f000 f847 	bl	8003fba <__retarget_lock_init_recursive>
 8003f2c:	f7ff ff96 	bl	8003e5c <__sfp_lock_release>
 8003f30:	2208      	movs	r2, #8
 8003f32:	4629      	mov	r1, r5
 8003f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	61a5      	str	r5, [r4, #24]
 8003f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f44:	f7ff fd2c 	bl	80039a0 <memset>
 8003f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f50:	4620      	mov	r0, r4
 8003f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f54:	3468      	adds	r4, #104	; 0x68
 8003f56:	e7d9      	b.n	8003f0c <__sfp+0x1c>
 8003f58:	2104      	movs	r1, #4
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7ff ff62 	bl	8003e24 <__sfmoreglue>
 8003f60:	4604      	mov	r4, r0
 8003f62:	6030      	str	r0, [r6, #0]
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1d5      	bne.n	8003f14 <__sfp+0x24>
 8003f68:	f7ff ff78 	bl	8003e5c <__sfp_lock_release>
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	e7ee      	b.n	8003f50 <__sfp+0x60>
 8003f72:	bf00      	nop
 8003f74:	08004a40 	.word	0x08004a40
 8003f78:	ffff0001 	.word	0xffff0001

08003f7c <_fwalk_reent>:
 8003f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f80:	4606      	mov	r6, r0
 8003f82:	4688      	mov	r8, r1
 8003f84:	2700      	movs	r7, #0
 8003f86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f92:	d505      	bpl.n	8003fa0 <_fwalk_reent+0x24>
 8003f94:	6824      	ldr	r4, [r4, #0]
 8003f96:	2c00      	cmp	r4, #0
 8003f98:	d1f7      	bne.n	8003f8a <_fwalk_reent+0xe>
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fa0:	89ab      	ldrh	r3, [r5, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d907      	bls.n	8003fb6 <_fwalk_reent+0x3a>
 8003fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003faa:	3301      	adds	r3, #1
 8003fac:	d003      	beq.n	8003fb6 <_fwalk_reent+0x3a>
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	47c0      	blx	r8
 8003fb4:	4307      	orrs	r7, r0
 8003fb6:	3568      	adds	r5, #104	; 0x68
 8003fb8:	e7e9      	b.n	8003f8e <_fwalk_reent+0x12>

08003fba <__retarget_lock_init_recursive>:
 8003fba:	4770      	bx	lr

08003fbc <__retarget_lock_acquire_recursive>:
 8003fbc:	4770      	bx	lr

08003fbe <__retarget_lock_release_recursive>:
 8003fbe:	4770      	bx	lr

08003fc0 <__swhatbuf_r>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	460e      	mov	r6, r1
 8003fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc8:	4614      	mov	r4, r2
 8003fca:	2900      	cmp	r1, #0
 8003fcc:	461d      	mov	r5, r3
 8003fce:	b096      	sub	sp, #88	; 0x58
 8003fd0:	da07      	bge.n	8003fe2 <__swhatbuf_r+0x22>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	602b      	str	r3, [r5, #0]
 8003fd6:	89b3      	ldrh	r3, [r6, #12]
 8003fd8:	061a      	lsls	r2, r3, #24
 8003fda:	d410      	bmi.n	8003ffe <__swhatbuf_r+0x3e>
 8003fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe0:	e00e      	b.n	8004000 <__swhatbuf_r+0x40>
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	f000 fc5a 	bl	800489c <_fstat_r>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	dbf2      	blt.n	8003fd2 <__swhatbuf_r+0x12>
 8003fec:	9a01      	ldr	r2, [sp, #4]
 8003fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ff6:	425a      	negs	r2, r3
 8003ff8:	415a      	adcs	r2, r3
 8003ffa:	602a      	str	r2, [r5, #0]
 8003ffc:	e7ee      	b.n	8003fdc <__swhatbuf_r+0x1c>
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	2000      	movs	r0, #0
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	b016      	add	sp, #88	; 0x58
 8004006:	bd70      	pop	{r4, r5, r6, pc}

08004008 <__smakebuf_r>:
 8004008:	898b      	ldrh	r3, [r1, #12]
 800400a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800400c:	079d      	lsls	r5, r3, #30
 800400e:	4606      	mov	r6, r0
 8004010:	460c      	mov	r4, r1
 8004012:	d507      	bpl.n	8004024 <__smakebuf_r+0x1c>
 8004014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	2301      	movs	r3, #1
 800401e:	6163      	str	r3, [r4, #20]
 8004020:	b002      	add	sp, #8
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	466a      	mov	r2, sp
 8004026:	ab01      	add	r3, sp, #4
 8004028:	f7ff ffca 	bl	8003fc0 <__swhatbuf_r>
 800402c:	9900      	ldr	r1, [sp, #0]
 800402e:	4605      	mov	r5, r0
 8004030:	4630      	mov	r0, r6
 8004032:	f000 f875 	bl	8004120 <_malloc_r>
 8004036:	b948      	cbnz	r0, 800404c <__smakebuf_r+0x44>
 8004038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800403c:	059a      	lsls	r2, r3, #22
 800403e:	d4ef      	bmi.n	8004020 <__smakebuf_r+0x18>
 8004040:	f023 0303 	bic.w	r3, r3, #3
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	81a3      	strh	r3, [r4, #12]
 800404a:	e7e3      	b.n	8004014 <__smakebuf_r+0xc>
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <__smakebuf_r+0x7c>)
 800404e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	6020      	str	r0, [r4, #0]
 8004054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	9b00      	ldr	r3, [sp, #0]
 800405c:	6120      	str	r0, [r4, #16]
 800405e:	6163      	str	r3, [r4, #20]
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	b15b      	cbz	r3, 800407c <__smakebuf_r+0x74>
 8004064:	4630      	mov	r0, r6
 8004066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406a:	f000 fc29 	bl	80048c0 <_isatty_r>
 800406e:	b128      	cbz	r0, 800407c <__smakebuf_r+0x74>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	89a0      	ldrh	r0, [r4, #12]
 800407e:	4305      	orrs	r5, r0
 8004080:	81a5      	strh	r5, [r4, #12]
 8004082:	e7cd      	b.n	8004020 <__smakebuf_r+0x18>
 8004084:	08003e19 	.word	0x08003e19

08004088 <_free_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	4605      	mov	r5, r0
 800408c:	2900      	cmp	r1, #0
 800408e:	d043      	beq.n	8004118 <_free_r+0x90>
 8004090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004094:	1f0c      	subs	r4, r1, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bfb8      	it	lt
 800409a:	18e4      	addlt	r4, r4, r3
 800409c:	f000 fc40 	bl	8004920 <__malloc_lock>
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <_free_r+0x94>)
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	4610      	mov	r0, r2
 80040a6:	b933      	cbnz	r3, 80040b6 <_free_r+0x2e>
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	6014      	str	r4, [r2, #0]
 80040ac:	4628      	mov	r0, r5
 80040ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040b2:	f000 bc3b 	b.w	800492c <__malloc_unlock>
 80040b6:	42a3      	cmp	r3, r4
 80040b8:	d90a      	bls.n	80040d0 <_free_r+0x48>
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	1862      	adds	r2, r4, r1
 80040be:	4293      	cmp	r3, r2
 80040c0:	bf01      	itttt	eq
 80040c2:	681a      	ldreq	r2, [r3, #0]
 80040c4:	685b      	ldreq	r3, [r3, #4]
 80040c6:	1852      	addeq	r2, r2, r1
 80040c8:	6022      	streq	r2, [r4, #0]
 80040ca:	6063      	str	r3, [r4, #4]
 80040cc:	6004      	str	r4, [r0, #0]
 80040ce:	e7ed      	b.n	80040ac <_free_r+0x24>
 80040d0:	461a      	mov	r2, r3
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b10b      	cbz	r3, 80040da <_free_r+0x52>
 80040d6:	42a3      	cmp	r3, r4
 80040d8:	d9fa      	bls.n	80040d0 <_free_r+0x48>
 80040da:	6811      	ldr	r1, [r2, #0]
 80040dc:	1850      	adds	r0, r2, r1
 80040de:	42a0      	cmp	r0, r4
 80040e0:	d10b      	bne.n	80040fa <_free_r+0x72>
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	4401      	add	r1, r0
 80040e6:	1850      	adds	r0, r2, r1
 80040e8:	4283      	cmp	r3, r0
 80040ea:	6011      	str	r1, [r2, #0]
 80040ec:	d1de      	bne.n	80040ac <_free_r+0x24>
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4401      	add	r1, r0
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	6053      	str	r3, [r2, #4]
 80040f8:	e7d8      	b.n	80040ac <_free_r+0x24>
 80040fa:	d902      	bls.n	8004102 <_free_r+0x7a>
 80040fc:	230c      	movs	r3, #12
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	e7d4      	b.n	80040ac <_free_r+0x24>
 8004102:	6820      	ldr	r0, [r4, #0]
 8004104:	1821      	adds	r1, r4, r0
 8004106:	428b      	cmp	r3, r1
 8004108:	bf01      	itttt	eq
 800410a:	6819      	ldreq	r1, [r3, #0]
 800410c:	685b      	ldreq	r3, [r3, #4]
 800410e:	1809      	addeq	r1, r1, r0
 8004110:	6021      	streq	r1, [r4, #0]
 8004112:	6063      	str	r3, [r4, #4]
 8004114:	6054      	str	r4, [r2, #4]
 8004116:	e7c9      	b.n	80040ac <_free_r+0x24>
 8004118:	bd38      	pop	{r3, r4, r5, pc}
 800411a:	bf00      	nop
 800411c:	200000f8 	.word	0x200000f8

08004120 <_malloc_r>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	1ccd      	adds	r5, r1, #3
 8004124:	f025 0503 	bic.w	r5, r5, #3
 8004128:	3508      	adds	r5, #8
 800412a:	2d0c      	cmp	r5, #12
 800412c:	bf38      	it	cc
 800412e:	250c      	movcc	r5, #12
 8004130:	2d00      	cmp	r5, #0
 8004132:	4606      	mov	r6, r0
 8004134:	db01      	blt.n	800413a <_malloc_r+0x1a>
 8004136:	42a9      	cmp	r1, r5
 8004138:	d903      	bls.n	8004142 <_malloc_r+0x22>
 800413a:	230c      	movs	r3, #12
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	2000      	movs	r0, #0
 8004140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004142:	f000 fbed 	bl	8004920 <__malloc_lock>
 8004146:	4921      	ldr	r1, [pc, #132]	; (80041cc <_malloc_r+0xac>)
 8004148:	680a      	ldr	r2, [r1, #0]
 800414a:	4614      	mov	r4, r2
 800414c:	b99c      	cbnz	r4, 8004176 <_malloc_r+0x56>
 800414e:	4f20      	ldr	r7, [pc, #128]	; (80041d0 <_malloc_r+0xb0>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b923      	cbnz	r3, 800415e <_malloc_r+0x3e>
 8004154:	4621      	mov	r1, r4
 8004156:	4630      	mov	r0, r6
 8004158:	f000 fb2a 	bl	80047b0 <_sbrk_r>
 800415c:	6038      	str	r0, [r7, #0]
 800415e:	4629      	mov	r1, r5
 8004160:	4630      	mov	r0, r6
 8004162:	f000 fb25 	bl	80047b0 <_sbrk_r>
 8004166:	1c43      	adds	r3, r0, #1
 8004168:	d123      	bne.n	80041b2 <_malloc_r+0x92>
 800416a:	230c      	movs	r3, #12
 800416c:	4630      	mov	r0, r6
 800416e:	6033      	str	r3, [r6, #0]
 8004170:	f000 fbdc 	bl	800492c <__malloc_unlock>
 8004174:	e7e3      	b.n	800413e <_malloc_r+0x1e>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	1b5b      	subs	r3, r3, r5
 800417a:	d417      	bmi.n	80041ac <_malloc_r+0x8c>
 800417c:	2b0b      	cmp	r3, #11
 800417e:	d903      	bls.n	8004188 <_malloc_r+0x68>
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	441c      	add	r4, r3
 8004184:	6025      	str	r5, [r4, #0]
 8004186:	e004      	b.n	8004192 <_malloc_r+0x72>
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	42a2      	cmp	r2, r4
 800418c:	bf0c      	ite	eq
 800418e:	600b      	streq	r3, [r1, #0]
 8004190:	6053      	strne	r3, [r2, #4]
 8004192:	4630      	mov	r0, r6
 8004194:	f000 fbca 	bl	800492c <__malloc_unlock>
 8004198:	f104 000b 	add.w	r0, r4, #11
 800419c:	1d23      	adds	r3, r4, #4
 800419e:	f020 0007 	bic.w	r0, r0, #7
 80041a2:	1ac2      	subs	r2, r0, r3
 80041a4:	d0cc      	beq.n	8004140 <_malloc_r+0x20>
 80041a6:	1a1b      	subs	r3, r3, r0
 80041a8:	50a3      	str	r3, [r4, r2]
 80041aa:	e7c9      	b.n	8004140 <_malloc_r+0x20>
 80041ac:	4622      	mov	r2, r4
 80041ae:	6864      	ldr	r4, [r4, #4]
 80041b0:	e7cc      	b.n	800414c <_malloc_r+0x2c>
 80041b2:	1cc4      	adds	r4, r0, #3
 80041b4:	f024 0403 	bic.w	r4, r4, #3
 80041b8:	42a0      	cmp	r0, r4
 80041ba:	d0e3      	beq.n	8004184 <_malloc_r+0x64>
 80041bc:	1a21      	subs	r1, r4, r0
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 faf6 	bl	80047b0 <_sbrk_r>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d1dd      	bne.n	8004184 <_malloc_r+0x64>
 80041c8:	e7cf      	b.n	800416a <_malloc_r+0x4a>
 80041ca:	bf00      	nop
 80041cc:	200000f8 	.word	0x200000f8
 80041d0:	200000fc 	.word	0x200000fc

080041d4 <__sfputc_r>:
 80041d4:	6893      	ldr	r3, [r2, #8]
 80041d6:	b410      	push	{r4}
 80041d8:	3b01      	subs	r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	6093      	str	r3, [r2, #8]
 80041de:	da07      	bge.n	80041f0 <__sfputc_r+0x1c>
 80041e0:	6994      	ldr	r4, [r2, #24]
 80041e2:	42a3      	cmp	r3, r4
 80041e4:	db01      	blt.n	80041ea <__sfputc_r+0x16>
 80041e6:	290a      	cmp	r1, #10
 80041e8:	d102      	bne.n	80041f0 <__sfputc_r+0x1c>
 80041ea:	bc10      	pop	{r4}
 80041ec:	f7ff bc6e 	b.w	8003acc <__swbuf_r>
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	1c58      	adds	r0, r3, #1
 80041f4:	6010      	str	r0, [r2, #0]
 80041f6:	7019      	strb	r1, [r3, #0]
 80041f8:	4608      	mov	r0, r1
 80041fa:	bc10      	pop	{r4}
 80041fc:	4770      	bx	lr

080041fe <__sfputs_r>:
 80041fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004200:	4606      	mov	r6, r0
 8004202:	460f      	mov	r7, r1
 8004204:	4614      	mov	r4, r2
 8004206:	18d5      	adds	r5, r2, r3
 8004208:	42ac      	cmp	r4, r5
 800420a:	d101      	bne.n	8004210 <__sfputs_r+0x12>
 800420c:	2000      	movs	r0, #0
 800420e:	e007      	b.n	8004220 <__sfputs_r+0x22>
 8004210:	463a      	mov	r2, r7
 8004212:	4630      	mov	r0, r6
 8004214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004218:	f7ff ffdc 	bl	80041d4 <__sfputc_r>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d1f3      	bne.n	8004208 <__sfputs_r+0xa>
 8004220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004224 <_vfiprintf_r>:
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	460d      	mov	r5, r1
 800422a:	4614      	mov	r4, r2
 800422c:	4698      	mov	r8, r3
 800422e:	4606      	mov	r6, r0
 8004230:	b09d      	sub	sp, #116	; 0x74
 8004232:	b118      	cbz	r0, 800423c <_vfiprintf_r+0x18>
 8004234:	6983      	ldr	r3, [r0, #24]
 8004236:	b90b      	cbnz	r3, 800423c <_vfiprintf_r+0x18>
 8004238:	f7ff fe22 	bl	8003e80 <__sinit>
 800423c:	4b89      	ldr	r3, [pc, #548]	; (8004464 <_vfiprintf_r+0x240>)
 800423e:	429d      	cmp	r5, r3
 8004240:	d11b      	bne.n	800427a <_vfiprintf_r+0x56>
 8004242:	6875      	ldr	r5, [r6, #4]
 8004244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004246:	07d9      	lsls	r1, r3, #31
 8004248:	d405      	bmi.n	8004256 <_vfiprintf_r+0x32>
 800424a:	89ab      	ldrh	r3, [r5, #12]
 800424c:	059a      	lsls	r2, r3, #22
 800424e:	d402      	bmi.n	8004256 <_vfiprintf_r+0x32>
 8004250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004252:	f7ff feb3 	bl	8003fbc <__retarget_lock_acquire_recursive>
 8004256:	89ab      	ldrh	r3, [r5, #12]
 8004258:	071b      	lsls	r3, r3, #28
 800425a:	d501      	bpl.n	8004260 <_vfiprintf_r+0x3c>
 800425c:	692b      	ldr	r3, [r5, #16]
 800425e:	b9eb      	cbnz	r3, 800429c <_vfiprintf_r+0x78>
 8004260:	4629      	mov	r1, r5
 8004262:	4630      	mov	r0, r6
 8004264:	f7ff fc84 	bl	8003b70 <__swsetup_r>
 8004268:	b1c0      	cbz	r0, 800429c <_vfiprintf_r+0x78>
 800426a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800426c:	07dc      	lsls	r4, r3, #31
 800426e:	d50e      	bpl.n	800428e <_vfiprintf_r+0x6a>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	b01d      	add	sp, #116	; 0x74
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427a:	4b7b      	ldr	r3, [pc, #492]	; (8004468 <_vfiprintf_r+0x244>)
 800427c:	429d      	cmp	r5, r3
 800427e:	d101      	bne.n	8004284 <_vfiprintf_r+0x60>
 8004280:	68b5      	ldr	r5, [r6, #8]
 8004282:	e7df      	b.n	8004244 <_vfiprintf_r+0x20>
 8004284:	4b79      	ldr	r3, [pc, #484]	; (800446c <_vfiprintf_r+0x248>)
 8004286:	429d      	cmp	r5, r3
 8004288:	bf08      	it	eq
 800428a:	68f5      	ldreq	r5, [r6, #12]
 800428c:	e7da      	b.n	8004244 <_vfiprintf_r+0x20>
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	0598      	lsls	r0, r3, #22
 8004292:	d4ed      	bmi.n	8004270 <_vfiprintf_r+0x4c>
 8004294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004296:	f7ff fe92 	bl	8003fbe <__retarget_lock_release_recursive>
 800429a:	e7e9      	b.n	8004270 <_vfiprintf_r+0x4c>
 800429c:	2300      	movs	r3, #0
 800429e:	9309      	str	r3, [sp, #36]	; 0x24
 80042a0:	2320      	movs	r3, #32
 80042a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042a6:	2330      	movs	r3, #48	; 0x30
 80042a8:	f04f 0901 	mov.w	r9, #1
 80042ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004470 <_vfiprintf_r+0x24c>
 80042b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042b8:	4623      	mov	r3, r4
 80042ba:	469a      	mov	sl, r3
 80042bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c0:	b10a      	cbz	r2, 80042c6 <_vfiprintf_r+0xa2>
 80042c2:	2a25      	cmp	r2, #37	; 0x25
 80042c4:	d1f9      	bne.n	80042ba <_vfiprintf_r+0x96>
 80042c6:	ebba 0b04 	subs.w	fp, sl, r4
 80042ca:	d00b      	beq.n	80042e4 <_vfiprintf_r+0xc0>
 80042cc:	465b      	mov	r3, fp
 80042ce:	4622      	mov	r2, r4
 80042d0:	4629      	mov	r1, r5
 80042d2:	4630      	mov	r0, r6
 80042d4:	f7ff ff93 	bl	80041fe <__sfputs_r>
 80042d8:	3001      	adds	r0, #1
 80042da:	f000 80aa 	beq.w	8004432 <_vfiprintf_r+0x20e>
 80042de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042e0:	445a      	add	r2, fp
 80042e2:	9209      	str	r2, [sp, #36]	; 0x24
 80042e4:	f89a 3000 	ldrb.w	r3, [sl]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a2 	beq.w	8004432 <_vfiprintf_r+0x20e>
 80042ee:	2300      	movs	r3, #0
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042f8:	f10a 0a01 	add.w	sl, sl, #1
 80042fc:	9304      	str	r3, [sp, #16]
 80042fe:	9307      	str	r3, [sp, #28]
 8004300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004304:	931a      	str	r3, [sp, #104]	; 0x68
 8004306:	4654      	mov	r4, sl
 8004308:	2205      	movs	r2, #5
 800430a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800430e:	4858      	ldr	r0, [pc, #352]	; (8004470 <_vfiprintf_r+0x24c>)
 8004310:	f000 faf8 	bl	8004904 <memchr>
 8004314:	9a04      	ldr	r2, [sp, #16]
 8004316:	b9d8      	cbnz	r0, 8004350 <_vfiprintf_r+0x12c>
 8004318:	06d1      	lsls	r1, r2, #27
 800431a:	bf44      	itt	mi
 800431c:	2320      	movmi	r3, #32
 800431e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004322:	0713      	lsls	r3, r2, #28
 8004324:	bf44      	itt	mi
 8004326:	232b      	movmi	r3, #43	; 0x2b
 8004328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800432c:	f89a 3000 	ldrb.w	r3, [sl]
 8004330:	2b2a      	cmp	r3, #42	; 0x2a
 8004332:	d015      	beq.n	8004360 <_vfiprintf_r+0x13c>
 8004334:	4654      	mov	r4, sl
 8004336:	2000      	movs	r0, #0
 8004338:	f04f 0c0a 	mov.w	ip, #10
 800433c:	9a07      	ldr	r2, [sp, #28]
 800433e:	4621      	mov	r1, r4
 8004340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004344:	3b30      	subs	r3, #48	; 0x30
 8004346:	2b09      	cmp	r3, #9
 8004348:	d94e      	bls.n	80043e8 <_vfiprintf_r+0x1c4>
 800434a:	b1b0      	cbz	r0, 800437a <_vfiprintf_r+0x156>
 800434c:	9207      	str	r2, [sp, #28]
 800434e:	e014      	b.n	800437a <_vfiprintf_r+0x156>
 8004350:	eba0 0308 	sub.w	r3, r0, r8
 8004354:	fa09 f303 	lsl.w	r3, r9, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	46a2      	mov	sl, r4
 800435c:	9304      	str	r3, [sp, #16]
 800435e:	e7d2      	b.n	8004306 <_vfiprintf_r+0xe2>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	1d19      	adds	r1, r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	9103      	str	r1, [sp, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	bfbb      	ittet	lt
 800436c:	425b      	neglt	r3, r3
 800436e:	f042 0202 	orrlt.w	r2, r2, #2
 8004372:	9307      	strge	r3, [sp, #28]
 8004374:	9307      	strlt	r3, [sp, #28]
 8004376:	bfb8      	it	lt
 8004378:	9204      	strlt	r2, [sp, #16]
 800437a:	7823      	ldrb	r3, [r4, #0]
 800437c:	2b2e      	cmp	r3, #46	; 0x2e
 800437e:	d10c      	bne.n	800439a <_vfiprintf_r+0x176>
 8004380:	7863      	ldrb	r3, [r4, #1]
 8004382:	2b2a      	cmp	r3, #42	; 0x2a
 8004384:	d135      	bne.n	80043f2 <_vfiprintf_r+0x1ce>
 8004386:	9b03      	ldr	r3, [sp, #12]
 8004388:	3402      	adds	r4, #2
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	9203      	str	r2, [sp, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	bfb8      	it	lt
 8004394:	f04f 33ff 	movlt.w	r3, #4294967295
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004480 <_vfiprintf_r+0x25c>
 800439e:	2203      	movs	r2, #3
 80043a0:	4650      	mov	r0, sl
 80043a2:	7821      	ldrb	r1, [r4, #0]
 80043a4:	f000 faae 	bl	8004904 <memchr>
 80043a8:	b140      	cbz	r0, 80043bc <_vfiprintf_r+0x198>
 80043aa:	2340      	movs	r3, #64	; 0x40
 80043ac:	eba0 000a 	sub.w	r0, r0, sl
 80043b0:	fa03 f000 	lsl.w	r0, r3, r0
 80043b4:	9b04      	ldr	r3, [sp, #16]
 80043b6:	3401      	adds	r4, #1
 80043b8:	4303      	orrs	r3, r0
 80043ba:	9304      	str	r3, [sp, #16]
 80043bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c0:	2206      	movs	r2, #6
 80043c2:	482c      	ldr	r0, [pc, #176]	; (8004474 <_vfiprintf_r+0x250>)
 80043c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043c8:	f000 fa9c 	bl	8004904 <memchr>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d03f      	beq.n	8004450 <_vfiprintf_r+0x22c>
 80043d0:	4b29      	ldr	r3, [pc, #164]	; (8004478 <_vfiprintf_r+0x254>)
 80043d2:	bb1b      	cbnz	r3, 800441c <_vfiprintf_r+0x1f8>
 80043d4:	9b03      	ldr	r3, [sp, #12]
 80043d6:	3307      	adds	r3, #7
 80043d8:	f023 0307 	bic.w	r3, r3, #7
 80043dc:	3308      	adds	r3, #8
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e2:	443b      	add	r3, r7
 80043e4:	9309      	str	r3, [sp, #36]	; 0x24
 80043e6:	e767      	b.n	80042b8 <_vfiprintf_r+0x94>
 80043e8:	460c      	mov	r4, r1
 80043ea:	2001      	movs	r0, #1
 80043ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f0:	e7a5      	b.n	800433e <_vfiprintf_r+0x11a>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f04f 0c0a 	mov.w	ip, #10
 80043f8:	4619      	mov	r1, r3
 80043fa:	3401      	adds	r4, #1
 80043fc:	9305      	str	r3, [sp, #20]
 80043fe:	4620      	mov	r0, r4
 8004400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004404:	3a30      	subs	r2, #48	; 0x30
 8004406:	2a09      	cmp	r2, #9
 8004408:	d903      	bls.n	8004412 <_vfiprintf_r+0x1ee>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0c5      	beq.n	800439a <_vfiprintf_r+0x176>
 800440e:	9105      	str	r1, [sp, #20]
 8004410:	e7c3      	b.n	800439a <_vfiprintf_r+0x176>
 8004412:	4604      	mov	r4, r0
 8004414:	2301      	movs	r3, #1
 8004416:	fb0c 2101 	mla	r1, ip, r1, r2
 800441a:	e7f0      	b.n	80043fe <_vfiprintf_r+0x1da>
 800441c:	ab03      	add	r3, sp, #12
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	462a      	mov	r2, r5
 8004422:	4630      	mov	r0, r6
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <_vfiprintf_r+0x258>)
 8004426:	a904      	add	r1, sp, #16
 8004428:	f3af 8000 	nop.w
 800442c:	4607      	mov	r7, r0
 800442e:	1c78      	adds	r0, r7, #1
 8004430:	d1d6      	bne.n	80043e0 <_vfiprintf_r+0x1bc>
 8004432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004434:	07d9      	lsls	r1, r3, #31
 8004436:	d405      	bmi.n	8004444 <_vfiprintf_r+0x220>
 8004438:	89ab      	ldrh	r3, [r5, #12]
 800443a:	059a      	lsls	r2, r3, #22
 800443c:	d402      	bmi.n	8004444 <_vfiprintf_r+0x220>
 800443e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004440:	f7ff fdbd 	bl	8003fbe <__retarget_lock_release_recursive>
 8004444:	89ab      	ldrh	r3, [r5, #12]
 8004446:	065b      	lsls	r3, r3, #25
 8004448:	f53f af12 	bmi.w	8004270 <_vfiprintf_r+0x4c>
 800444c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800444e:	e711      	b.n	8004274 <_vfiprintf_r+0x50>
 8004450:	ab03      	add	r3, sp, #12
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	462a      	mov	r2, r5
 8004456:	4630      	mov	r0, r6
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <_vfiprintf_r+0x258>)
 800445a:	a904      	add	r1, sp, #16
 800445c:	f000 f882 	bl	8004564 <_printf_i>
 8004460:	e7e4      	b.n	800442c <_vfiprintf_r+0x208>
 8004462:	bf00      	nop
 8004464:	08004a64 	.word	0x08004a64
 8004468:	08004a84 	.word	0x08004a84
 800446c:	08004a44 	.word	0x08004a44
 8004470:	08004aa4 	.word	0x08004aa4
 8004474:	08004aae 	.word	0x08004aae
 8004478:	00000000 	.word	0x00000000
 800447c:	080041ff 	.word	0x080041ff
 8004480:	08004aaa 	.word	0x08004aaa

08004484 <_printf_common>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	4616      	mov	r6, r2
 800448a:	4699      	mov	r9, r3
 800448c:	688a      	ldr	r2, [r1, #8]
 800448e:	690b      	ldr	r3, [r1, #16]
 8004490:	4607      	mov	r7, r0
 8004492:	4293      	cmp	r3, r2
 8004494:	bfb8      	it	lt
 8004496:	4613      	movlt	r3, r2
 8004498:	6033      	str	r3, [r6, #0]
 800449a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800449e:	460c      	mov	r4, r1
 80044a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044a4:	b10a      	cbz	r2, 80044aa <_printf_common+0x26>
 80044a6:	3301      	adds	r3, #1
 80044a8:	6033      	str	r3, [r6, #0]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	0699      	lsls	r1, r3, #26
 80044ae:	bf42      	ittt	mi
 80044b0:	6833      	ldrmi	r3, [r6, #0]
 80044b2:	3302      	addmi	r3, #2
 80044b4:	6033      	strmi	r3, [r6, #0]
 80044b6:	6825      	ldr	r5, [r4, #0]
 80044b8:	f015 0506 	ands.w	r5, r5, #6
 80044bc:	d106      	bne.n	80044cc <_printf_common+0x48>
 80044be:	f104 0a19 	add.w	sl, r4, #25
 80044c2:	68e3      	ldr	r3, [r4, #12]
 80044c4:	6832      	ldr	r2, [r6, #0]
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	42ab      	cmp	r3, r5
 80044ca:	dc28      	bgt.n	800451e <_printf_common+0x9a>
 80044cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044d0:	1e13      	subs	r3, r2, #0
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	bf18      	it	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	0692      	lsls	r2, r2, #26
 80044da:	d42d      	bmi.n	8004538 <_printf_common+0xb4>
 80044dc:	4649      	mov	r1, r9
 80044de:	4638      	mov	r0, r7
 80044e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d020      	beq.n	800452c <_printf_common+0xa8>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	68e5      	ldr	r5, [r4, #12]
 80044ee:	f003 0306 	and.w	r3, r3, #6
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	bf18      	it	ne
 80044f6:	2500      	movne	r5, #0
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	f04f 0600 	mov.w	r6, #0
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	bf08      	it	eq
 8004502:	1aad      	subeq	r5, r5, r2
 8004504:	6922      	ldr	r2, [r4, #16]
 8004506:	bf08      	it	eq
 8004508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800450c:	4293      	cmp	r3, r2
 800450e:	bfc4      	itt	gt
 8004510:	1a9b      	subgt	r3, r3, r2
 8004512:	18ed      	addgt	r5, r5, r3
 8004514:	341a      	adds	r4, #26
 8004516:	42b5      	cmp	r5, r6
 8004518:	d11a      	bne.n	8004550 <_printf_common+0xcc>
 800451a:	2000      	movs	r0, #0
 800451c:	e008      	b.n	8004530 <_printf_common+0xac>
 800451e:	2301      	movs	r3, #1
 8004520:	4652      	mov	r2, sl
 8004522:	4649      	mov	r1, r9
 8004524:	4638      	mov	r0, r7
 8004526:	47c0      	blx	r8
 8004528:	3001      	adds	r0, #1
 800452a:	d103      	bne.n	8004534 <_printf_common+0xb0>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	3501      	adds	r5, #1
 8004536:	e7c4      	b.n	80044c2 <_printf_common+0x3e>
 8004538:	2030      	movs	r0, #48	; 0x30
 800453a:	18e1      	adds	r1, r4, r3
 800453c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004546:	4422      	add	r2, r4
 8004548:	3302      	adds	r3, #2
 800454a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800454e:	e7c5      	b.n	80044dc <_printf_common+0x58>
 8004550:	2301      	movs	r3, #1
 8004552:	4622      	mov	r2, r4
 8004554:	4649      	mov	r1, r9
 8004556:	4638      	mov	r0, r7
 8004558:	47c0      	blx	r8
 800455a:	3001      	adds	r0, #1
 800455c:	d0e6      	beq.n	800452c <_printf_common+0xa8>
 800455e:	3601      	adds	r6, #1
 8004560:	e7d9      	b.n	8004516 <_printf_common+0x92>
	...

08004564 <_printf_i>:
 8004564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	460c      	mov	r4, r1
 800456a:	7e27      	ldrb	r7, [r4, #24]
 800456c:	4691      	mov	r9, r2
 800456e:	2f78      	cmp	r7, #120	; 0x78
 8004570:	4680      	mov	r8, r0
 8004572:	469a      	mov	sl, r3
 8004574:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800457a:	d807      	bhi.n	800458c <_printf_i+0x28>
 800457c:	2f62      	cmp	r7, #98	; 0x62
 800457e:	d80a      	bhi.n	8004596 <_printf_i+0x32>
 8004580:	2f00      	cmp	r7, #0
 8004582:	f000 80d9 	beq.w	8004738 <_printf_i+0x1d4>
 8004586:	2f58      	cmp	r7, #88	; 0x58
 8004588:	f000 80a4 	beq.w	80046d4 <_printf_i+0x170>
 800458c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004594:	e03a      	b.n	800460c <_printf_i+0xa8>
 8004596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800459a:	2b15      	cmp	r3, #21
 800459c:	d8f6      	bhi.n	800458c <_printf_i+0x28>
 800459e:	a001      	add	r0, pc, #4	; (adr r0, 80045a4 <_printf_i+0x40>)
 80045a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	08004611 	.word	0x08004611
 80045ac:	0800458d 	.word	0x0800458d
 80045b0:	0800458d 	.word	0x0800458d
 80045b4:	0800458d 	.word	0x0800458d
 80045b8:	0800458d 	.word	0x0800458d
 80045bc:	08004611 	.word	0x08004611
 80045c0:	0800458d 	.word	0x0800458d
 80045c4:	0800458d 	.word	0x0800458d
 80045c8:	0800458d 	.word	0x0800458d
 80045cc:	0800458d 	.word	0x0800458d
 80045d0:	0800471f 	.word	0x0800471f
 80045d4:	08004641 	.word	0x08004641
 80045d8:	08004701 	.word	0x08004701
 80045dc:	0800458d 	.word	0x0800458d
 80045e0:	0800458d 	.word	0x0800458d
 80045e4:	08004741 	.word	0x08004741
 80045e8:	0800458d 	.word	0x0800458d
 80045ec:	08004641 	.word	0x08004641
 80045f0:	0800458d 	.word	0x0800458d
 80045f4:	0800458d 	.word	0x0800458d
 80045f8:	08004709 	.word	0x08004709
 80045fc:	680b      	ldr	r3, [r1, #0]
 80045fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	600a      	str	r2, [r1, #0]
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460c:	2301      	movs	r3, #1
 800460e:	e0a4      	b.n	800475a <_printf_i+0x1f6>
 8004610:	6825      	ldr	r5, [r4, #0]
 8004612:	6808      	ldr	r0, [r1, #0]
 8004614:	062e      	lsls	r6, r5, #24
 8004616:	f100 0304 	add.w	r3, r0, #4
 800461a:	d50a      	bpl.n	8004632 <_printf_i+0xce>
 800461c:	6805      	ldr	r5, [r0, #0]
 800461e:	600b      	str	r3, [r1, #0]
 8004620:	2d00      	cmp	r5, #0
 8004622:	da03      	bge.n	800462c <_printf_i+0xc8>
 8004624:	232d      	movs	r3, #45	; 0x2d
 8004626:	426d      	negs	r5, r5
 8004628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462c:	230a      	movs	r3, #10
 800462e:	485e      	ldr	r0, [pc, #376]	; (80047a8 <_printf_i+0x244>)
 8004630:	e019      	b.n	8004666 <_printf_i+0x102>
 8004632:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004636:	6805      	ldr	r5, [r0, #0]
 8004638:	600b      	str	r3, [r1, #0]
 800463a:	bf18      	it	ne
 800463c:	b22d      	sxthne	r5, r5
 800463e:	e7ef      	b.n	8004620 <_printf_i+0xbc>
 8004640:	680b      	ldr	r3, [r1, #0]
 8004642:	6825      	ldr	r5, [r4, #0]
 8004644:	1d18      	adds	r0, r3, #4
 8004646:	6008      	str	r0, [r1, #0]
 8004648:	0628      	lsls	r0, r5, #24
 800464a:	d501      	bpl.n	8004650 <_printf_i+0xec>
 800464c:	681d      	ldr	r5, [r3, #0]
 800464e:	e002      	b.n	8004656 <_printf_i+0xf2>
 8004650:	0669      	lsls	r1, r5, #25
 8004652:	d5fb      	bpl.n	800464c <_printf_i+0xe8>
 8004654:	881d      	ldrh	r5, [r3, #0]
 8004656:	2f6f      	cmp	r7, #111	; 0x6f
 8004658:	bf0c      	ite	eq
 800465a:	2308      	moveq	r3, #8
 800465c:	230a      	movne	r3, #10
 800465e:	4852      	ldr	r0, [pc, #328]	; (80047a8 <_printf_i+0x244>)
 8004660:	2100      	movs	r1, #0
 8004662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004666:	6866      	ldr	r6, [r4, #4]
 8004668:	2e00      	cmp	r6, #0
 800466a:	bfa8      	it	ge
 800466c:	6821      	ldrge	r1, [r4, #0]
 800466e:	60a6      	str	r6, [r4, #8]
 8004670:	bfa4      	itt	ge
 8004672:	f021 0104 	bicge.w	r1, r1, #4
 8004676:	6021      	strge	r1, [r4, #0]
 8004678:	b90d      	cbnz	r5, 800467e <_printf_i+0x11a>
 800467a:	2e00      	cmp	r6, #0
 800467c:	d04d      	beq.n	800471a <_printf_i+0x1b6>
 800467e:	4616      	mov	r6, r2
 8004680:	fbb5 f1f3 	udiv	r1, r5, r3
 8004684:	fb03 5711 	mls	r7, r3, r1, r5
 8004688:	5dc7      	ldrb	r7, [r0, r7]
 800468a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800468e:	462f      	mov	r7, r5
 8004690:	42bb      	cmp	r3, r7
 8004692:	460d      	mov	r5, r1
 8004694:	d9f4      	bls.n	8004680 <_printf_i+0x11c>
 8004696:	2b08      	cmp	r3, #8
 8004698:	d10b      	bne.n	80046b2 <_printf_i+0x14e>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	07df      	lsls	r7, r3, #31
 800469e:	d508      	bpl.n	80046b2 <_printf_i+0x14e>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	6861      	ldr	r1, [r4, #4]
 80046a4:	4299      	cmp	r1, r3
 80046a6:	bfde      	ittt	le
 80046a8:	2330      	movle	r3, #48	; 0x30
 80046aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046b2:	1b92      	subs	r2, r2, r6
 80046b4:	6122      	str	r2, [r4, #16]
 80046b6:	464b      	mov	r3, r9
 80046b8:	4621      	mov	r1, r4
 80046ba:	4640      	mov	r0, r8
 80046bc:	f8cd a000 	str.w	sl, [sp]
 80046c0:	aa03      	add	r2, sp, #12
 80046c2:	f7ff fedf 	bl	8004484 <_printf_common>
 80046c6:	3001      	adds	r0, #1
 80046c8:	d14c      	bne.n	8004764 <_printf_i+0x200>
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	b004      	add	sp, #16
 80046d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d4:	4834      	ldr	r0, [pc, #208]	; (80047a8 <_printf_i+0x244>)
 80046d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046da:	680e      	ldr	r6, [r1, #0]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	f856 5b04 	ldr.w	r5, [r6], #4
 80046e2:	061f      	lsls	r7, r3, #24
 80046e4:	600e      	str	r6, [r1, #0]
 80046e6:	d514      	bpl.n	8004712 <_printf_i+0x1ae>
 80046e8:	07d9      	lsls	r1, r3, #31
 80046ea:	bf44      	itt	mi
 80046ec:	f043 0320 	orrmi.w	r3, r3, #32
 80046f0:	6023      	strmi	r3, [r4, #0]
 80046f2:	b91d      	cbnz	r5, 80046fc <_printf_i+0x198>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	f023 0320 	bic.w	r3, r3, #32
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	2310      	movs	r3, #16
 80046fe:	e7af      	b.n	8004660 <_printf_i+0xfc>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	2378      	movs	r3, #120	; 0x78
 800470a:	4828      	ldr	r0, [pc, #160]	; (80047ac <_printf_i+0x248>)
 800470c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004710:	e7e3      	b.n	80046da <_printf_i+0x176>
 8004712:	065e      	lsls	r6, r3, #25
 8004714:	bf48      	it	mi
 8004716:	b2ad      	uxthmi	r5, r5
 8004718:	e7e6      	b.n	80046e8 <_printf_i+0x184>
 800471a:	4616      	mov	r6, r2
 800471c:	e7bb      	b.n	8004696 <_printf_i+0x132>
 800471e:	680b      	ldr	r3, [r1, #0]
 8004720:	6826      	ldr	r6, [r4, #0]
 8004722:	1d1d      	adds	r5, r3, #4
 8004724:	6960      	ldr	r0, [r4, #20]
 8004726:	600d      	str	r5, [r1, #0]
 8004728:	0635      	lsls	r5, r6, #24
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	d501      	bpl.n	8004732 <_printf_i+0x1ce>
 800472e:	6018      	str	r0, [r3, #0]
 8004730:	e002      	b.n	8004738 <_printf_i+0x1d4>
 8004732:	0671      	lsls	r1, r6, #25
 8004734:	d5fb      	bpl.n	800472e <_printf_i+0x1ca>
 8004736:	8018      	strh	r0, [r3, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	4616      	mov	r6, r2
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	e7ba      	b.n	80046b6 <_printf_i+0x152>
 8004740:	680b      	ldr	r3, [r1, #0]
 8004742:	1d1a      	adds	r2, r3, #4
 8004744:	600a      	str	r2, [r1, #0]
 8004746:	681e      	ldr	r6, [r3, #0]
 8004748:	2100      	movs	r1, #0
 800474a:	4630      	mov	r0, r6
 800474c:	6862      	ldr	r2, [r4, #4]
 800474e:	f000 f8d9 	bl	8004904 <memchr>
 8004752:	b108      	cbz	r0, 8004758 <_printf_i+0x1f4>
 8004754:	1b80      	subs	r0, r0, r6
 8004756:	6060      	str	r0, [r4, #4]
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	2300      	movs	r3, #0
 800475e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004762:	e7a8      	b.n	80046b6 <_printf_i+0x152>
 8004764:	4632      	mov	r2, r6
 8004766:	4649      	mov	r1, r9
 8004768:	4640      	mov	r0, r8
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	47d0      	blx	sl
 800476e:	3001      	adds	r0, #1
 8004770:	d0ab      	beq.n	80046ca <_printf_i+0x166>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	079b      	lsls	r3, r3, #30
 8004776:	d413      	bmi.n	80047a0 <_printf_i+0x23c>
 8004778:	68e0      	ldr	r0, [r4, #12]
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	4298      	cmp	r0, r3
 800477e:	bfb8      	it	lt
 8004780:	4618      	movlt	r0, r3
 8004782:	e7a4      	b.n	80046ce <_printf_i+0x16a>
 8004784:	2301      	movs	r3, #1
 8004786:	4632      	mov	r2, r6
 8004788:	4649      	mov	r1, r9
 800478a:	4640      	mov	r0, r8
 800478c:	47d0      	blx	sl
 800478e:	3001      	adds	r0, #1
 8004790:	d09b      	beq.n	80046ca <_printf_i+0x166>
 8004792:	3501      	adds	r5, #1
 8004794:	68e3      	ldr	r3, [r4, #12]
 8004796:	9903      	ldr	r1, [sp, #12]
 8004798:	1a5b      	subs	r3, r3, r1
 800479a:	42ab      	cmp	r3, r5
 800479c:	dcf2      	bgt.n	8004784 <_printf_i+0x220>
 800479e:	e7eb      	b.n	8004778 <_printf_i+0x214>
 80047a0:	2500      	movs	r5, #0
 80047a2:	f104 0619 	add.w	r6, r4, #25
 80047a6:	e7f5      	b.n	8004794 <_printf_i+0x230>
 80047a8:	08004ab5 	.word	0x08004ab5
 80047ac:	08004ac6 	.word	0x08004ac6

080047b0 <_sbrk_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	2300      	movs	r3, #0
 80047b4:	4d05      	ldr	r5, [pc, #20]	; (80047cc <_sbrk_r+0x1c>)
 80047b6:	4604      	mov	r4, r0
 80047b8:	4608      	mov	r0, r1
 80047ba:	602b      	str	r3, [r5, #0]
 80047bc:	f7fc f8c2 	bl	8000944 <_sbrk>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_sbrk_r+0x1a>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_sbrk_r+0x1a>
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	200001cc 	.word	0x200001cc

080047d0 <__sread>:
 80047d0:	b510      	push	{r4, lr}
 80047d2:	460c      	mov	r4, r1
 80047d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d8:	f000 f8ae 	bl	8004938 <_read_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	bfab      	itete	ge
 80047e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047e2:	89a3      	ldrhlt	r3, [r4, #12]
 80047e4:	181b      	addge	r3, r3, r0
 80047e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ea:	bfac      	ite	ge
 80047ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ee:	81a3      	strhlt	r3, [r4, #12]
 80047f0:	bd10      	pop	{r4, pc}

080047f2 <__swrite>:
 80047f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f6:	461f      	mov	r7, r3
 80047f8:	898b      	ldrh	r3, [r1, #12]
 80047fa:	4605      	mov	r5, r0
 80047fc:	05db      	lsls	r3, r3, #23
 80047fe:	460c      	mov	r4, r1
 8004800:	4616      	mov	r6, r2
 8004802:	d505      	bpl.n	8004810 <__swrite+0x1e>
 8004804:	2302      	movs	r3, #2
 8004806:	2200      	movs	r2, #0
 8004808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480c:	f000 f868 	bl	80048e0 <_lseek_r>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	4632      	mov	r2, r6
 8004814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004818:	81a3      	strh	r3, [r4, #12]
 800481a:	4628      	mov	r0, r5
 800481c:	463b      	mov	r3, r7
 800481e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	f000 b817 	b.w	8004858 <_write_r>

0800482a <__sseek>:
 800482a:	b510      	push	{r4, lr}
 800482c:	460c      	mov	r4, r1
 800482e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004832:	f000 f855 	bl	80048e0 <_lseek_r>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	bf15      	itete	ne
 800483c:	6560      	strne	r0, [r4, #84]	; 0x54
 800483e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004846:	81a3      	strheq	r3, [r4, #12]
 8004848:	bf18      	it	ne
 800484a:	81a3      	strhne	r3, [r4, #12]
 800484c:	bd10      	pop	{r4, pc}

0800484e <__sclose>:
 800484e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004852:	f000 b813 	b.w	800487c <_close_r>
	...

08004858 <_write_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	2200      	movs	r2, #0
 8004862:	4d05      	ldr	r5, [pc, #20]	; (8004878 <_write_r+0x20>)
 8004864:	602a      	str	r2, [r5, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	f7fc f9cc 	bl	8000c04 <_write>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d102      	bne.n	8004876 <_write_r+0x1e>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	b103      	cbz	r3, 8004876 <_write_r+0x1e>
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	200001cc 	.word	0x200001cc

0800487c <_close_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	2300      	movs	r3, #0
 8004880:	4d05      	ldr	r5, [pc, #20]	; (8004898 <_close_r+0x1c>)
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	f7fc f82b 	bl	80008e2 <_close>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_close_r+0x1a>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_close_r+0x1a>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	200001cc 	.word	0x200001cc

0800489c <_fstat_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	2300      	movs	r3, #0
 80048a0:	4d06      	ldr	r5, [pc, #24]	; (80048bc <_fstat_r+0x20>)
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	f7fc f825 	bl	80008f8 <_fstat>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d102      	bne.n	80048b8 <_fstat_r+0x1c>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	b103      	cbz	r3, 80048b8 <_fstat_r+0x1c>
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	bf00      	nop
 80048bc:	200001cc 	.word	0x200001cc

080048c0 <_isatty_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	2300      	movs	r3, #0
 80048c4:	4d05      	ldr	r5, [pc, #20]	; (80048dc <_isatty_r+0x1c>)
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	602b      	str	r3, [r5, #0]
 80048cc:	f7fc f823 	bl	8000916 <_isatty>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d102      	bne.n	80048da <_isatty_r+0x1a>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	b103      	cbz	r3, 80048da <_isatty_r+0x1a>
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	200001cc 	.word	0x200001cc

080048e0 <_lseek_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	4d05      	ldr	r5, [pc, #20]	; (8004900 <_lseek_r+0x20>)
 80048ec:	602a      	str	r2, [r5, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7fc f81b 	bl	800092a <_lseek>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_lseek_r+0x1e>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_lseek_r+0x1e>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200001cc 	.word	0x200001cc

08004904 <memchr>:
 8004904:	4603      	mov	r3, r0
 8004906:	b510      	push	{r4, lr}
 8004908:	b2c9      	uxtb	r1, r1
 800490a:	4402      	add	r2, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	4618      	mov	r0, r3
 8004910:	d101      	bne.n	8004916 <memchr+0x12>
 8004912:	2000      	movs	r0, #0
 8004914:	e003      	b.n	800491e <memchr+0x1a>
 8004916:	7804      	ldrb	r4, [r0, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	428c      	cmp	r4, r1
 800491c:	d1f6      	bne.n	800490c <memchr+0x8>
 800491e:	bd10      	pop	{r4, pc}

08004920 <__malloc_lock>:
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <__malloc_lock+0x8>)
 8004922:	f7ff bb4b 	b.w	8003fbc <__retarget_lock_acquire_recursive>
 8004926:	bf00      	nop
 8004928:	200001c4 	.word	0x200001c4

0800492c <__malloc_unlock>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__malloc_unlock+0x8>)
 800492e:	f7ff bb46 	b.w	8003fbe <__retarget_lock_release_recursive>
 8004932:	bf00      	nop
 8004934:	200001c4 	.word	0x200001c4

08004938 <_read_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	2200      	movs	r2, #0
 8004942:	4d05      	ldr	r5, [pc, #20]	; (8004958 <_read_r+0x20>)
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fb ffae 	bl	80008a8 <_read>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_read_r+0x1e>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_read_r+0x1e>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	200001cc 	.word	0x200001cc

0800495c <_init>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr

08004968 <_fini>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr
